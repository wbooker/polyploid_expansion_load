initialize()
{
	//set inheritance
	//defineGlobal("inheritance", "auto");
	//defineGlobal("dom_pattern", "DFE");

	//set population parameters
	//defineConstant("K", 25); // carrying-capacity density
	//defineConstant("mig_rate", 0.05); //mig rate
	//defineConstant("r", log(2)); //growth rate
	//defineConstant("u", 2.5e-8); // mutation_rate
	//defineConstant("rho", 2.5e-8); // recombination_rate
	//defineConstant("b_s", 0.005); // beneficial selection coefficient
	//defineConstant("d_s", -0.005); // deleterious selection coefficient
	//defineConstant("g_size", 999999); // genome size

	//set as nonWF model
	initializeSLiMModelType("nonWF");
	
	//set mutation rate
	initializeMutationRate(u);
	
	//
	initializeMutationType("m1", 0.5, "g", -0.001472,0.16);
	
	// g1 genomic element type: 10% beneficial and 90% deleterious on all mutations
	initializeGenomicElementType("g1", m1,1);
	
	// uniform chromosome of length 10 kb with uniform recombination
	initializeGenomicElement(g1, 0, g_size);
	initializeRecombinationRate(rho);

	
	defineGlobal("c_tag", 0);
	defineGlobal("previous_deme", 0);

}


function (float)calc_exp_load_proportion_1(lifso<Subpopulation> x)
{
	expansion_fitness = 0;
	ind_flag = 0;
	for(ind in x.individuals)
	{
		genomes = c(ind.genomes,sim.subpopulations[0].individuals[ind.tag].genomes);
		exp_mutations_flag = 0;
		s_exp=0;
		s_all=0;
		mutations = unique(genomes.mutationsOfType(m1));
		for(mut in mutations)
		{
			if (mut.getValue("exp_mutation_1") == 1)
			{
				if(exp_mutations_flag == 0)
				{
					exp_mutations = mut;
					exp_mutations_flag = 1;
				}
				else
				{
					exp_mutations = c(exp_mutations, mut);
				}
			}
		}
		if(size(exp_mutations) > 0)
		{
			exp_counts = genomes.mutationCountsInGenomes(exp_mutations);
			for(mut in 1:size(exp_mutations))
			{
				s_exp = s_exp + (exp_mutations[mut-1].getValue("h_m")[exp_counts[mut-1]] * exp_mutations[mut-1].selectionCoeff);
			}
			
			all_counts = genomes.mutationCountsInGenomes(mutations);
			for(mut in 1:size(mutations))
			{
				s_all = s_all + (mutations[mut-1].getValue("h_m")[all_counts[mut-1]] * mutations[mut-1].selectionCoeff);
			}		
		}
			
		if(ind_flag == 0)
		{
			exp_fitnesses = 1 + s_exp;
			all_fitnesses = 1 + s_all;
			ind_flag = 1;
		}
		else
		{
			exp_fitnesses = c(exp_fitnesses, (1+s_exp));
			all_fitnesses = c(all_fitnesses, (1+s_all));
		}
	}
	//return(exp_fitnesses);
	return (mean(exp_fitnesses)-1) / (mean(all_fitnesses)-1);
	
}

function (float)calc_exp_load_proportion_5(lifso<Subpopulation> x)
{
	expansion_fitness = 0;
	ind_flag = 0;
	for(ind in x.individuals)
	{
		genomes = c(ind.genomes,sim.subpopulations[0].individuals[ind.tag].genomes);
		exp_mutations_flag = 0;
		s_exp=0;
		s_all=0;
		mutations = unique(genomes.mutationsOfType(m1));
		for(mut in mutations)
		{
			if (mut.getValue("exp_mutation_5") == 1)
			{
				if(exp_mutations_flag == 0)
				{
					exp_mutations = mut;
					exp_mutations_flag = 1;
				}
				else
				{
					exp_mutations = c(exp_mutations, mut);
				}
			}
		}
		if(size(exp_mutations) > 0)
		{
			exp_counts = genomes.mutationCountsInGenomes(exp_mutations);
			for(mut in 1:size(exp_mutations))
			{
				s_exp = s_exp + (exp_mutations[mut-1].getValue("h_m")[exp_counts[mut-1]] * exp_mutations[mut-1].selectionCoeff);
			}
			
			all_counts = genomes.mutationCountsInGenomes(mutations);
			for(mut in 1:size(mutations))
			{
				s_all = s_all + (mutations[mut-1].getValue("h_m")[all_counts[mut-1]] * mutations[mut-1].selectionCoeff);
			}		
		}
			
		if(ind_flag == 0)
		{
			exp_fitnesses = 1 + s_exp;
			all_fitnesses = 1 + s_all;
			ind_flag = 1;
		}
		else
		{
			exp_fitnesses = c(exp_fitnesses, (1+s_exp));
			all_fitnesses = c(all_fitnesses, (1+s_all));
		}
	}
	//return(exp_fitnesses);
	return (mean(exp_fitnesses)-1) / (mean(all_fitnesses)-1);
	
}

function (float)calc_h_from_s(float s, float t_i, integer t_r)
{
	//calculate h from s using theta_intercept and theta_rate parameters
	h = 1 / ((1/t_i)-(t_r*s));
	return h;
}

function (float)get_tetraploid_h_vector(float s_d){
	//calculate h vector of tetraploids given h of a diploid (s_d)
	if(s_d == 0.5){
		return c(0.0,0.25,0.5,0.75,1.0);
	}
	else
	{
		s_t_25 = 1-(1+((1-s_d)/(2*s_d-1)))*(0.25/(0.25+((1-s_d)/(2*s_d-1))));
		s_t_50 = 1-(1+((1-s_d)/(2*s_d-1)))*(0.5/(0.5+((1-s_d)/(2*s_d-1))));
		s_t_75 = 1-(1+((1-s_d)/(2*s_d-1)))*(0.75/(0.75+((1-s_d)/(2*s_d-1))));
		return c(0.0,s_t_75,s_t_50,s_t_25,1.0);
	}
}

function (float)calc_het(lifso x)
{
	if(inheritance == "diploid")
	{
		chroms = c(sim.subpopulations[x-1].individuals.genome1, sim.subpopulations[0].individuals[sim.subpopulations[x-1].individuals.tag].genome2);
	}
	else
	{
		chroms = c(sim.subpopulations[x-1].individuals.genomes, sim.subpopulations[0].individuals[sim.subpopulations[x-1].individuals.tag].genomes);
	}
	
	if(size(chroms) == 0)
		return 0.0;
	else
		return calcHeterozygosity(chroms);
}

function (float)get_mutation_freqs(lifso<Subpopulation> x)
{
	div_factor = 4;
	if(inheritance == "diploid")
		div_factor = 2;
	all_inds = c(x.individuals,sim.subpopulations[0].individuals[x.individuals.tag]);
	if(size(all_inds) != 0){
		counts = all_inds.genomes.mutationCountsInGenomes(NULL);
		return counts / size(x.individuals) / div_factor;
	}
	else
		return 0.0;
}

function (float)get_beneficial_freq(lifso<Subpopulation> x)
{
	div_factor = 4;
	if(inheritance == "diploid")
		div_factor = 2;
	all_inds = c(x.individuals,sim.subpopulations[0].individuals[x.individuals.tag]);
	all_muts = unique(all_inds.genomes.mutationsOfType(m1));
	if(size(all_inds) != 0){
		counts = all_inds.genomes.mutationCountsInGenomes(all_muts);
		return counts / size(x.individuals) / div_factor;
	}
	else
		return 0.0;
}

function (float)get_deleterious_freq(lifso<Subpopulation> x)
{
	div_factor = 4;
	if(inheritance == "diploid")
		div_factor = 2;
	all_inds = c(x.individuals,sim.subpopulations[0].individuals[x.individuals.tag]);
	all_muts = unique(all_inds.genomes.mutationsOfType(m2));
	if(size(all_inds) != 0){
		counts = all_inds.genomes.mutationCountsInGenomes(all_muts);
		return counts / size(x.individuals) / div_factor;
	}
	else
		return 0.0;
}

function (float)mut_per_genome(lifso<Subpopulation> x)
{
	div_factor = 4;
	if(inheritance == "diploid")
		div_factor = 2;
	n_muts_ben = 0;
	n_muts_del = 0;
	
	all_inds = c(x.individuals,sim.subpopulations[0].individuals[x.individuals.tag]);
	if(size(all_inds) != 0){
		for(ind in x.individuals){
			genomes = c(ind.genomes, sim.subpopulations[0].individuals[ind.tag].genomes);
			n_muts_ben = n_muts_ben + genomes.countOfMutationsOfType(m1);
			n_muts_del = n_muts_del + genomes.countOfMutationsOfType(m2);

		}
		counts_total = sum(n_muts_ben+n_muts_del) / size(x.individuals) / div_factor;
		counts_ben= sum(n_muts_ben) / size(x.individuals) / div_factor;
		counts_del= sum(n_muts_del) / size(x.individuals) / div_factor;

		return c(counts_total, counts_ben, counts_del);
	}
	else
		return 0.0;
}

function (float)get_mutation_per_ind(lifso<Subpopulation> x)
{
	n_muts = 0;
	if(size(x.individuals) != 0){
		for(ind in x.individuals){
			counts_1 = ind.genomes.mutationCountsInGenomes(NULL);
			counts_2 = sim.subpopulations[0].individuals[ind.tag].genomes.mutationCountsInGenomes(NULL);
			all_counts = counts_1 + counts_2;
			n_muts = n_muts + size(which(all_counts != 0));
		}
		return n_muts / size(x.individuals);
	}
	else
		return 0.0;
}

function (float)get_ben_mutation_per_ind(lifso<Subpopulation> x)
{
	all_genomes = c(x.individuals,sim.subpopulations[0].individuals[x.individuals.tag]);
	all_muts = unique(all_genomes.genomes.mutationsOfType(m1));
	n_muts = 0;
	if(size(all_genomes) != 0){
		for(ind in x.individuals){
			counts_1 = ind.genomes.mutationCountsInGenomes(all_muts);
			counts_2 = sim.subpopulations[0].individuals[ind.tag].genomes.mutationCountsInGenomes(all_muts);
			all_counts = counts_1 + counts_2;
			n_muts = n_muts + size(which(all_counts != 0));
		}
		return n_muts / size(x.individuals);
	}
	else
		return 0.0;
}

function (float)get_del_mutation_per_ind(lifso<Subpopulation> x)
{
	all_genomes = c(x.individuals,sim.subpopulations[0].individuals[x.individuals.tag]);
	all_muts = unique(all_genomes.genomes.mutationsOfType(m2));
	n_muts = 0;
	if(size(all_genomes) != 0){
		for(ind in x.individuals){
			counts_1 = ind.genomes.mutationCountsInGenomes(all_muts);
			counts_2 = sim.subpopulations[0].individuals[ind.tag].genomes.mutationCountsInGenomes(all_muts);
			all_counts = counts_1 + counts_2;
			n_muts = n_muts + size(which(all_counts != 0));
		}
		return n_muts / size(x.individuals);
	}
	else
		return 0.0;
}


function (float)calc_max_PHS(lifso<Subpopulation> x)
{
	max_phs = 0;
	
	for(ind in x.individuals){
		counts_1 = ind.genomes.mutationFrequenciesInGenomes(NULL);
		counts_2 = sim.subpopulations[0].individuals[ind.tag].genomes.mutationFrequenciesInGenomes(NULL);
		freqs = (counts_1+counts_2) / 2;
		phs = size(which(freqs<1.0 & freqs>0.0)) / size(freqs);
		if(phs > max_phs)
			max_phs = phs;
	}
	return asFloat(max_phs);	
}

function (float)calc_all_PHS_avg(lifso x)
{
	phs_flag = 0;
	
	for(ind in x.individuals){
		counts_1 = ind.genomes.mutationFrequenciesInGenomes(NULL);
		counts_2 = sim.subpopulations[0].individuals[ind.tag].genomes.mutationFrequenciesInGenomes(NULL);
		freqs = (counts_1+counts_2) / 2;
		phs = size(which(freqs<1.0 & freqs>0.0)) / size(freqs);
		if(phs_flag == 0){
			all_phs = phs;
			phs_flag = 1;
		}
		else
			all_phs = c(all_phs,phs);
	}
	return asFloat(mean(all_phs));	
}

function (float)variance(float x)
{
	vars = 0;
	if(isNULL(x)){
		return NULL;
	}
	else{
		mean_x = mean(x);
		for(i in x){
			if(!isNULL(i)){
				vars = vars + (i-mean_x)^2;
			}
		}
	}
		return asFloat(vars/size(x));
}


mutation(m1)
{
	mut.setValue("exp_mutation_5", 0);
	mut.setValue("exp_mutation_1", 0);
	if(mut.originTick >= 0){
		if(parent.getValue("pop") >= (size(sim.subpopulations)-4))
			mut.setValue("exp_mutation_5", 1);
		if(parent.getValue("pop") >= size(sim.subpopulations))
			mut.setValue("exp_mutation_1", 1);
	}

	mut.setValue("dom", calc_h_from_s(mut.selectionCoeff, 0.978, 50328));
	if(inheritance=="diploid")
	{
		mut.setValue("h_m",c(0,mut.getValue("dom"),1.0));
	}
	else
	{
		mut.setValue("h_m",get_tetraploid_h_vector(1-mut.getValue("dom")));
	}
	return T; 
}

mutationEffect(m1)
{
	if(individual.subpopulation == p1){
		return 1.0;
	}
	other = sim.subpopulations[0].individuals[individual.tag];
	n = sum(individual.genomes.containsMutations(mut)) + sum(other.genomes.containsMutations(mut));
	h_m = mut.getValue("h_m");
	return 1 + h_m[n] * mut.selectionCoeff;
}

1 early()
{
	print(inheritance);
	print(dom_pattern);
	print("k: " + K +  " r: " + r + " m: " + mig_rate);
	//first deme holds extra chromosomes of every individual. individuals don't migrate from or into here
	sim.addSubpop(1, K*5);

	//initialize next 5 demes at carrying_capacity
	for (i in 2:6){
		sim.addSubpop(i, K);

		//create individual tags to keep track of chromosomes
		for(j in seqLen(sim.subpopulations[i - 1].individualCount)){
			defineGlobal("c_tag", (c_tag+1));
			//c_tag = runif(1);
			sim.subpopulations[i - 1].individuals[j].tagF = c_tag;
			sim.subpopulations[i - 1].individuals[j].setValue("pop", i);
			sim.subpopulations[0].individuals[j+((i-2)*K)].tagF = c_tag;
			sim.subpopulations[0].individuals[j+((i-2)*K)].setValue("pop", i);
			//sim.subpopulations[i - 1].individuals[j].tag = c_tag;
		}
	}
	print(get_tetraploid_h_vector(0.75));
}


//remove mutations from 1 genome in each diploid population (reservoir and local) to make it effectively diploid if diploid inheritance
early() {
	if(inheritance == "diploid")
	{
		sim.subpopulations[1:(size(sim.subpopulations)-1)].individuals.genome2.removeMutations();
		sim.subpopulations[0].individuals.genome1.removeMutations();
	}
}
survival(p1) {
// since p1 has fitness of 1 for calc purposes, we need to kill them if age is greater than 1

 if (individual.age == 0)
 	return T;
 return NULL;
}

101 first()
{
	print(calc_exp_load_proportion_5(sim.subpopulations[5]));
}

//open up other populations after 10k generations
2501 first()
{
	//initialize rest of demes at 0
		sim.addSubpop(7, 0);
		//sim.chromosome.setMutationRate(0.000000000025);
}

early()
{
	// parents die; offspring survive proportional to fitness (Generations discrete and non-overlapping)
	for (i in 1:size(sim.subpopulations))
	{
		inds = sim.subpopulations[i - 1].individuals;
		inds[inds.age > 0].fitnessScaling = 0.0;
	}
	
	//forward mig
	for (i in 2:(size(sim.subpopulations) - 1))
	{
		nIndividuals = sim.subpopulations[i - 1].individualCount;
		if (nIndividuals > 0){		
			nMigrants = rpois(1, nIndividuals * mig_rate);
			if (nMigrants >= 1){
				mig_inds = sim.subpopulations[i - 1].individuals;
				if (size(mig_inds) >= 1){
					if(nMigrants > size(mig_inds))
						nMigrants = size(mig_inds);
					migrants = sample(mig_inds, nMigrants);
					for (migrant in migrants)
					{
						dest = i;
						sim.subpopulations[dest].takeMigrants(migrant);
						migrant.setValue("pop", i);
					}
				}
			}
		}
	}
	
	//reverse mig
	for (i in 3:size(sim.subpopulations))
	{
		nIndividuals = sim.subpopulations[i - 1].individualCount;
		if (nIndividuals > 0){
			nMigrants = rpois(1, nIndividuals * mig_rate);
			if (nMigrants >= 1){
				mig_inds = sim.subpopulations[i - 1].individuals;
				if (size(mig_inds) >= 1){
					if(nMigrants > size(mig_inds))
						nMigrants = size(mig_inds);
					migrants = sample(mig_inds, nMigrants);
					for (migrant in migrants)
					{
						dest = i - 2;
						sim.subpopulations[dest].takeMigrants(migrant);
						migrant.setValue("pop", i);
					}
				}
			}
		}	
	}
}

//set reproduction
reproduction()
{
	
	//logistic growth
	for (i in 2:size(sim.subpopulations))
	{
		N_star = (exp(r) * sim.subpopulations[i - 1].individualCount) / (1 + ((exp(r) - 1) * sim.subpopulations[i - 1].individualCount / K));
		if (N_star > 0)
		{
			N_prime = rpois(1, N_star);
			inds = sim.subpopulations[i - 1].individuals;
			fitness = sim.subpopulations[i - 1].cachedFitness(NULL);
			parents1 = sample(inds, N_prime, replace=T);
			parents2 = sample(inds, N_prime, replace=T);
			if(inheritance == "diploid")
			{
				for (j in seqLen(N_prime))
				{
				breakpoints1 = sim.chromosome.drawBreakpoints();
				breakpoints2 = sim.chromosome.drawBreakpoints();
				offspring = sim.subpopulations[i - 1].addRecombinant(parents1[j].genome1, sim.subpopulations[0].individuals[parents1[j].tag].genome2, breakpoints1, parents2[j].genome1, sim.subpopulations[0].individuals[parents2[j].tag].genome2, breakpoints2);
				other = sim.subpopulations[0].addRecombinant(parents1[j].genome1, sim.subpopulations[0].individuals[parents1[j].tag].genome2, breakpoints1, parents2[j].genome1, sim.subpopulations[0].individuals[parents2[j].tag].genome2, breakpoints2);
				defineGlobal("c_tag", (c_tag+1));
				//c_tag = runif(1);
				offspring.tagF = c_tag; //these aren't getting set for some reason
				other.tagF = c_tag;
				offspring.setValue("pop", i);				
				other.setValue("pop", i);
				}
			}
			else
			{
				for (j in seqLen(N_prime))
				{
					p1_chroms = c(parents1[j].genomes, sim.subpopulations[0].individuals[parents1[j].tag].genomes);
					p2_chroms = c(parents2[j].genomes, sim.subpopulations[0].individuals[parents2[j].tag].genomes);
					p1_order = seq(from = 0, to = 3, by = 1);
					p2_order = seq(from = 0, to = 3, by = 1);
					if(inheritance == "auto"){
						p1_order = sample(seqLen(4), 4);
						p2_order = sample(seqLen(4), 4);
					}
					breakpoints1 = sim.chromosome.drawBreakpoints();
					breakpoints2 = sim.chromosome.drawBreakpoints();
					offspring = sim.subpopulations[i - 1].addRecombinant(p1_chroms[p1_order[0]], p1_chroms[p1_order[1]], breakpoints1, p2_chroms[p2_order[0]], p2_chroms[p2_order[1]], breakpoints2);
					breakpoints1 = sim.chromosome.drawBreakpoints();
					breakpoints2 = sim.chromosome.drawBreakpoints();
					other = sim.subpopulations[0].addRecombinant(p1_chroms[p1_order[2]], p1_chroms[p1_order[3]], breakpoints1, p2_chroms[p2_order[2]], p2_chroms[p2_order[3]], breakpoints2);
					defineGlobal("c_tag", (c_tag+1));
					//c_tag = runif(1);
					offspring.tagF = c_tag; //these aren't getting set for some reason
					other.tagF = c_tag;
					offspring.setValue("pop", i);				
					other.setValue("pop", i);
				}
			}
		}
	}
	self.active = 0;
}

2502:10001 late()
{
	if (sim.subpopulations[size(sim.subpopulations)-1].individualCount > 0){
		sim.addSubpop(size(sim.subpopulations)+1, 0);
	}
}

// need to set tags for new individuals after selection induced mortality
early(){

	inds = sim.subpopulations[seq(from = 1, to = (size(sim.subpopulations)-1), by = 1)].individuals;
	tag = match(inds.tagF, sim.subpopulations[0].individuals.tagF);
	inds.tag = tag;
}

2: late() {

	inds = sim.subpopulations[seq(from = 1, to = (size(sim.subpopulations)-1), by = 1)].individuals;
	tag = match(inds.tagF, sim.subpopulations[0].individuals.tagF);
	inds.tag = tag;
}

//do a quick check to make sure tags are right every 100 gens
101: first (){
	check_ticks = seq(from=101,to=200001,by=100);
	if(match(community.tick, check_ticks) >= 0){
		for (ind in sim.subpopulations[seq(from = 1, to = (size(sim.subpopulations)-1), by = 1)].individuals)
			if (ind.tagF != sim.subpopulations[0].individuals[ind.tag].tagF)
				stop("late(): error for individual " + ind.index);
	}
}

//do a quick check to make sure tags are right every 100 gens
101: early (){
	check_ticks = seq(from=101,to=200001,by=100);
	if(match(community.tick, check_ticks) >= 0){
		for (ind in sim.subpopulations[seq(from = 1, to = (size(sim.subpopulations)-1), by = 1)].individuals)
			if (ind.tagF != sim.subpopulations[0].individuals[ind.tag].tagF)
				stop("late(): error for individual " + ind.index);
	}
}

//do a quick check to make sure tags are right every 100 gens
101: late (){
	check_ticks = seq(from=101,to=200001,by=100);
	if(match(community.tick, check_ticks) >= 0){
		for (ind in sim.subpopulations[seq(from = 1, to = (size(sim.subpopulations)-1), by = 1)].individuals)
			if (ind.tagF != sim.subpopulations[0].individuals[ind.tag].tagF)
				stop("late(): error for individual " + ind.index);
	}
}

2501:10001 late()
{
	start_exp_tick = 2501;
	output_ticks = seq(from=start_exp_tick,to=200001,by=10);
	if(match(community.tick, output_ticks) >= 0){
		defineGlobal("current_deme", (size(sim.subpopulations)-1));
		while(isNULL(mean(sim.subpopulations[current_deme].cachedFitness(NULL)))){
			defineGlobal("current_deme", (current_deme-1));
		}
		speed = (current_deme - previous_deme) / 10;
		defineGlobal("previous_deme", current_deme);
		fitness_start = mean(sim.subpopulations[1].cachedFitness(NULL));
		fitness_mid = mean(sim.subpopulations[round((current_deme)/2)].cachedFitness(NULL));
		fitness_edge = mean(sim.subpopulations[current_deme].cachedFitness(NULL));
		
		
		//log output
		if(community.tick == start_exp_tick){
			defineGlobal("fitness_scalar", mean(sim.subpopulations[current_deme-1].cachedFitness(NULL)));
			outDir = paste0(c("output/test_12_15_2022/",inheritance,"_",dom_pattern,"_K-",K,"_m-",mig_rate,"_r-",r,"_u-",u,"_rho-",rho,"_bs-",b_s,"_ds-",d_s,"_g-",g_size,"_start-",start_exp_tick,"/"));
			createDirectory(outDir);
			if(isNULL(readFile(paste0(outDir,"trackFile.txt")))){
				writeFile(paste0(outDir,"trackFile.txt"), "0", append = F);
				curr_rep = 0;
			}
			if(!isNULL(readFile(paste0(outDir,"trackFile.txt")))){
				trackFile = readFile(paste0(outDir,"trackFile.txt"));
				curr_rep = asInteger(trackFile[0])+1;
				writeFile(paste0(outDir,"trackFile.txt"), asString(curr_rep), append = F);
			}
			outfile = paste0(c(outDir,curr_rep,"_log.csv"));			
			log = community.createLogFile(outfile, logInterval=10);
 			log.addCycle(); 
			log.addCustomColumn("start_fitness", "mean(sim.subpopulations[1].cachedFitness(NULL));");
			log.addCustomColumn("mid_fitness", "mean(sim.subpopulations[round((current_deme)/2)].cachedFitness(NULL));");
			log.addCustomColumn("edge_fitness", "mean(sim.subpopulations[current_deme].cachedFitness(NULL));");
			log.addCustomColumn("start_het", "calc_het(2);");
			log.addCustomColumn("mid_het", "calc_het(((current_deme)/2)+1);");
			log.addCustomColumn("edge_het", "calc_het(current_deme+1);");
			log.addCustomColumn("current_deme", "current_deme;");
			
			// intitialize log  for fitnesses of each subpop
			defineGlobal("mean_fitness_file", paste0(c(outDir,curr_rep,"_meanFitness.csv")));
			writeFile(mean_fitness_file, paste(seq(from = 1, to = 2000, by = 1), sep=","), append = F);
			defineGlobal("var_fitness_file", paste0(c(outDir,curr_rep,"_varFitness.csv")));
			writeFile(var_fitness_file, paste(seq(from = 1, to = 2000, by = 1), sep=","), append = F);
			defineGlobal("mean_mutations_file", paste0(c(outDir,curr_rep,"_meanMutationsPerInd.csv")));
			writeFile(mean_mutations_file, paste(seq(from = 1, to = 2000, by = 1), sep=","), append = F);
			//defineGlobal("mean_ben_mutations_file", paste0(c(outDir,curr_rep,"_meanBenMutationsPerInd.csv")));
			//writeFile(mean_ben_mutations_file, paste(seq(from = 1, to = 2000, by = 1), sep=","), append = F);
			//defineGlobal("mean_del_mutations_file", paste0(c(outDir,curr_rep,"_meanDelMutationsPerInd.csv")));
			//writeFile(mean_del_mutations_file, paste(seq(from = 1, to = 2000, by = 1), sep=","), append = F);
			//defineGlobal("mean_ben_per_del_mutations_file", paste0(c(outDir,curr_rep,"_meanBenPerDelMutationsPerInd.csv")));
			//defineGlobal("mean_mutations_file_genome", paste0(c(outDir,curr_rep,"_meanMutationsPerGenome.csv")));
			//writeFile(mean_mutations_file, paste(seq(from = 1, to = 2000, by = 1), sep=","), append = F);
			//defineGlobal("mean_ben_mutations_file_genome", paste0(c(outDir,curr_rep,"_meanBenMutationsPerGenome.csv")));
			//writeFile(mean_ben_mutations_file, paste(seq(from = 1, to = 2000, by = 1), sep=","), append = F);
			//defineGlobal("mean_del_mutations_file_genome", paste0(c(outDir,curr_rep,"_meanDelMutationsPerGenome.csv")));
			//writeFile(mean_del_mutations_file, paste(seq(from = 1, to = 2000, by = 1), sep=","), append = F);
			//defineGlobal("mean_ben_per_del_mutations_file_genome", paste0(c(outDir,curr_rep,"_meanBenPerDelMutationsPerGenome.csv")));
			//writeFile(mean_ben_per_del_mutations_file, paste(seq(from = 1, to = 2000, by = 1), sep=","), append = F);
			defineGlobal("fixed_mutations_file", paste0(c(outDir,curr_rep,"_fixedMutations.csv")));
			writeFile(fixed_mutations_file, paste(seq(from = 1, to = 2000, by = 1), sep=","), append = F);
			defineGlobal("max_phs_file", paste0(c(outDir,curr_rep,"_maxPhs.csv")));
			writeFile(max_phs_file, paste(seq(from = 1, to = 2000, by = 1), sep=","), append = F);
			defineGlobal("heterozygosity_file", paste0(c(outDir,curr_rep,"_heterozygosity.csv")));
			writeFile(heterozygosity_file, paste(seq(from = 1, to = 2000, by = 1), sep=","), append = F);
			defineGlobal("pop_size_file", paste0(c(outDir,curr_rep,"_popSize.csv")));
			writeFile(pop_size_file, paste(seq(from = 1, to = 2000, by = 1), sep=","), append = F);

		}
		//update fitness file
		sub_fitnesses_mean = community.tick-start_exp_tick;
		sub_fitnesses_var = community.tick-start_exp_tick;
		sub_mutations_mean = community.tick-start_exp_tick;
		//sub_ben_mutations_mean = community.tick-start_exp_tick;
		//sub_del_mutations_mean = community.tick-start_exp_tick;
		//sub_ben_del_mutations_mean = community.tick-start_exp_tick;
		//sub_mutations_mean_genome = community.tick-start_exp_tick;
		//sub_ben_mutations_mean_genome = community.tick-start_exp_tick;
		//sub_del_mutations_mean_genome = community.tick-start_exp_tick;
		//sub_ben_del_mutations_mean_genome = community.tick-start_exp_tick;
		sub_mutations_fixed = community.tick-start_exp_tick;
		sub_max_phs = community.tick-start_exp_tick;
		sub_heterozygosity = community.tick-start_exp_tick;
		sub_pop_size = community.tick-start_exp_tick;

		for (i in 2:(current_deme+1)){
			temp_mean_fitness = mean(sim.subpopulations[i-1].cachedFitness(NULL));
			temp_var_fitness = variance(sim.subpopulations[i-1].cachedFitness(NULL));
			temp_mean_mutations = get_mutation_per_ind(sim.subpopulations[i-1]);
			//temp_mean_ben_mutations = get_ben_mutation_per_ind(sim.subpopulations[i-1]);
			//temp_mean_del_mutations = get_del_mutation_per_ind(sim.subpopulations[i-1]);
			//temp_mut_per_genome = mut_per_genome(sim.subpopulations[i-1]);
			temp_fixed_mutations = size(which(get_mutation_freqs(sim.subpopulations[i-1])==1.0));
			temp_max_phs = calc_max_PHS(sim.subpopulations[i-1]);
			temp_heterozygosity = calc_het(i);
			temp_pop_size = size(sim.subpopulations[i-1].individuals);
			
			if(isNULL(temp_mean_fitness)){
				sub_fitnesses_mean = c(sub_fitnesses_mean, 0);
				sub_fitnesses_var = c(sub_fitnesses_var, 0);
				sub_mutations_mean = c(sub_mutations_mean, 0);
				//sub_ben_mutations_mean = c(sub_ben_mutations_mean, 0);
				//sub_del_mutations_mean = c(sub_del_mutations_mean, 0);
				//sub_ben_del_mutations_mean = c(sub_ben_del_mutations_mean, 0);
				//sub_mutations_mean_genome = c(sub_mutations_mean_genome, 0);
				//sub_ben_mutations_mean_genome = c(sub_ben_mutations_mean_genome, 0);
				//sub_del_mutations_mean_genome = c(sub_del_mutations_mean_genome, 0);
				//sub_ben_del_mutations_mean_genome = c(sub_ben_del_mutations_mean_genome, 0);
				sub_mutations_fixed = c(sub_mutations_fixed, 0);
				sub_max_phs = c(sub_max_phs, 0);
				sub_heterozygosity = c(sub_heterozygosity, 0);
				sub_pop_size = c (sub_pop_size, 0);

			}
			else{
				sub_fitnesses_mean = c(sub_fitnesses_mean, (temp_mean_fitness/fitness_scalar));
				sub_fitnesses_var = c(sub_fitnesses_var, temp_var_fitness);
				sub_mutations_mean = c(sub_mutations_mean, temp_mean_mutations);
				//sub_ben_mutations_mean = c(sub_ben_mutations_mean, temp_mean_ben_mutations);
				//sub_del_mutations_mean = c(sub_del_mutations_mean, temp_mean_del_mutations);
				//sub_ben_del_mutations_mean = c(sub_ben_del_mutations_mean, (temp_mean_ben_mutations/temp_mean_del_mutations));
				//sub_mutations_mean_genome = c(sub_mutations_mean_genome, temp_mut_per_genome[0]);
				//sub_ben_mutations_mean_genome = c(sub_ben_mutations_mean_genome, temp_mut_per_genome[1]);
				//sub_del_mutations_mean_genome = c(sub_del_mutations_mean_genome, temp_mut_per_genome[2]);
				//sub_ben_del_mutations_mean_genome = c(sub_ben_del_mutations_mean_genome, (temp_mut_per_genome[1]/temp_mut_per_genome[2]));
				sub_mutations_fixed = c(sub_mutations_fixed, temp_fixed_mutations);
				sub_max_phs = c(sub_max_phs, temp_max_phs);
				sub_heterozygosity = c(sub_heterozygosity, temp_heterozygosity);
				sub_pop_size = c(sub_pop_size, temp_pop_size);


			}
		}
		extra_pops = rep(0, (2000-size(sim.subpopulations)));
		mean_fitness_line = c(sub_fitnesses_mean, extra_pops);
		var_fitness_line = c(sub_fitnesses_var, extra_pops);
		mean_mutations_line = c(sub_mutations_mean, extra_pops);
		//ben_mean_mutations_line = c(sub_ben_mutations_mean, extra_pops);
		//del_mean_mutations_line = c(sub_del_mutations_mean, extra_pops);
		//ben_per_del_mean_mutations_line = c(sub_ben_del_mutations_mean, extra_pops);
		//mean_mutations_line_genome = c(sub_mutations_mean_genome, extra_pops);
		//ben_mean_mutations_line_genome = c(sub_ben_mutations_mean_genome, extra_pops);
		//del_mean_mutations_line_genome = c(sub_del_mutations_mean_genome, extra_pops);
		//ben_per_del_mean_mutations_line_genome = c(sub_ben_del_mutations_mean_genome, extra_pops);
		fixed_mutations_line = c(sub_mutations_fixed, extra_pops);
		max_phs_line = c(sub_max_phs, extra_pops);
		heterozygosity_line = c(sub_heterozygosity, extra_pops);
		pop_size_line = c(sub_pop_size, extra_pops);


		writeFile(mean_fitness_file, paste(mean_fitness_line, sep=","), append = T);
		writeFile(var_fitness_file, paste(var_fitness_line, sep=","), append = T);
		writeFile(mean_mutations_file, paste(mean_mutations_line, sep=","), append = T);
		//writeFile(mean_ben_mutations_file, paste(ben_mean_mutations_line, sep=","), append = T);
		//writeFile(mean_del_mutations_file, paste(del_mean_mutations_line, sep=","), append = T);
		//writeFile(mean_ben_per_del_mutations_file, paste(ben_per_del_mean_mutations_line, sep=","), append = T);
		//writeFile(mean_mutations_file_genome, paste(mean_mutations_line_genome, sep=","), append = T);
		//writeFile(mean_ben_mutations_file_genome, paste(ben_mean_mutations_line_genome, sep=","), append = T);
		//writeFile(mean_del_mutations_file_genome, paste(del_mean_mutations_line_genome, sep=","), append = T);
		//writeFile(mean_ben_per_del_mutations_file_genome, paste(ben_per_del_mean_mutations_line_genome, sep=","), append = T);
		writeFile(fixed_mutations_file, paste(fixed_mutations_line, sep=","), append = T);
		writeFile(max_phs_file, paste(max_phs_line, sep=","), append = T);
		writeFile(heterozygosity_file, paste(heterozygosity_line, sep=","), append = T);
		writeFile(pop_size_file, paste(pop_size_line, sep=","), append = T);


		//print to std out
		print("tick: " + community.tick + " time: " + time() + " start: " + fitness_start + " mid: " + fitness_mid + " edge: " + fitness_edge + " demes: " + current_deme + " speed: " + speed);
		}
}
