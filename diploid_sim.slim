initialize()
{
	//set global population parameters
	defineConstant("K", 25); // carrying-capacity density
	defineConstant("mig_rate", 0.05); //mig rate
	defineConstant("r", log(2)); //growth rate
	defineConstant("u", 2.5e-11); // mutation_rate
	defineConstant("rho", 2.5e-11); // recombination_rate
	defineConstant("b_s", 0.000); // beneficial selection coefficient
	defineConstant("d_s", -0.005); // deleterious selection coefficient
	defineConstant("g_size", 999999999); // genome size

	//set as nonWF model
	initializeSLiMModelType("nonWF");
	
	//set mutation rate
	initializeMutationRate(u);
	
	// m1 mutation type: beneficial
	initializeMutationType("m1", 0.5, "f", b_s);
	
	// m2 mutation type: deleterious
	initializeMutationType("m2", 0.5, "f", d_s);
	
	// g1 genomic element type: 10% beneficial and 90% deleterious on all mutations
	initializeGenomicElementType("g1", c(m1, m2), c(0.1, 0.9));
	
	// uniform chromosome of length 10 kb with uniform recombination
	initializeGenomicElement(g1, 0, g_size);
	initializeRecombinationRate(rho);
	

	
	defineGlobal("previous_deme", 0);
}

1 first()
{
	print("non-polyploid");
	//initialize first 5 demes at carrying_capacity
	for (i in 1:5)
		sim.addSubpop(i, K);
}
/*
1:1000 early()
{
	// parents die; offspring survive proportional to fitness (Generations discrete and non-overlapping)
	for (i in 1:5)
	{
		inds = sim.subpopulations[i - 1].individuals;
		inds[inds.age > 0].fitnessScaling = 0.0;
	}
	
	//forward mig
	for (i in 1:4)
	{
		nIndividuals = sim.subpopulations[i - 1].individualCount;
		if (nIndividuals > 0){		
			nMigrants = rpois(1, nIndividuals * mig_rate);
			if (nMigrants >= 1){
				mig_inds = sim.subpopulations[i - 1].individuals;
				if (size(mig_inds) >= 1){
					if(nMigrants > size(mig_inds))
						nMigrants = size(mig_inds);
					migrants = sample(mig_inds, nMigrants);
					for (migrant in migrants)
					{
						dest = i;
						sim.subpopulations[dest].takeMigrants(migrant);
					}
				}
			}
		}
	}
	
	//reverse mig
	for (i in 2:5)
	{
		nIndividuals = sim.subpopulations[i - 1].individualCount;
		if (nIndividuals > 0){
			nMigrants = rpois(1, nIndividuals * mig_rate);
			if (nMigrants >= 1){
				mig_inds = sim.subpopulations[i - 1].individuals;
				if (size(mig_inds) >= 1){
					if(nMigrants > size(mig_inds))
						nMigrants = size(mig_inds);
					migrants = sample(mig_inds, nMigrants);
					for (migrant in migrants)
					{
						dest = i - 2;
						sim.subpopulations[dest].takeMigrants(migrant);
					}
				}
			}
		}	
	}
}
*/
//open up other populations after 10k generations
1001 first()
{
	//rescale fitness to 1 (only at edge pop??)
	//sim.subpopulations[1 - 1].fitnessScaling = 1 / mean(sim.subpopulations[1 - 1].cachedFitness(NULL));
	//sim.subpopulations[2 - 1].fitnessScaling = 1 / mean(sim.subpopulations[2 - 1].cachedFitness(NULL));
	//sim.subpopulations[3 - 1].fitnessScaling = 1 / mean(sim.subpopulations[3 - 1].cachedFitness(NULL));
	//sim.subpopulations[4 - 1].fitnessScaling = 1 / mean(sim.subpopulations[4 - 1].cachedFitness(NULL));
	//sim.subpopulations[5 - 1].fitnessScaling = 1 / mean(sim.subpopulations[5 - 1].cachedFitness(NULL));
	
	//initialize rest of demes at 0
		sim.addSubpop(6, 0);
}

early()
{
	// parents die; offspring survive proportional to fitness (Generations discrete and non-overlapping)
	for (i in 1:size(sim.subpopulations))
	{
		inds = sim.subpopulations[i - 1].individuals;
		inds[inds.age > 0].fitnessScaling = 0.0;
	}
	
	//forward mig
	for (i in 1:(size(sim.subpopulations) - 1))
	{
		nIndividuals = sim.subpopulations[i - 1].individualCount;
		if (nIndividuals > 0){		
			nMigrants = rpois(1, nIndividuals * mig_rate);
			if (nMigrants >= 1){
				mig_inds = sim.subpopulations[i - 1].individuals;
				if (size(mig_inds) >= 1){
					if(nMigrants > size(mig_inds))
						nMigrants = size(mig_inds);
					migrants = sample(mig_inds, nMigrants);
					for (migrant in migrants)
					{
						dest = i;
						sim.subpopulations[dest].takeMigrants(migrant);
					}
				}
			}
		}
	}
	
	//reverse mig
	for (i in 2:size(sim.subpopulations))
	{
		nIndividuals = sim.subpopulations[i - 1].individualCount;
		if (nIndividuals > 0){
			nMigrants = rpois(1, nIndividuals * mig_rate);
			if (nMigrants >= 1){
				mig_inds = sim.subpopulations[i - 1].individuals;
				if (size(mig_inds) >= 1){
					if(nMigrants > size(mig_inds))
						nMigrants = size(mig_inds);
					migrants = sample(mig_inds, nMigrants);
					for (migrant in migrants)
					{
						dest = i - 2;
						sim.subpopulations[dest].takeMigrants(migrant);
					}
				}
			}
		}	
	}
}

mutationEffect(m1){
	h = c(0.0, 0.5, 1.0);
	n = sum(individual.genomes.containsMutations(mut));
	return 1 + h[n] * mut.selectionCoeff;
}

mutationEffect(m2){
	h = c(0.0, 0.5, 1.0);
	n = sum(individual.genomes.containsMutations(mut));
	return 1 + h[n] * mut.selectionCoeff;
}

//set reproduction
reproduction()
{
	//logistic growth
	for (i in 1:size(sim.subpopulations))
	{
		N_star = (exp(r) * sim.subpopulations[i - 1].individualCount) / (1 + ((exp(r) - 1) * sim.subpopulations[i - 1].individualCount / K));
		if (N_star > 0){
			N_prime = rpois(1, N_star);
			inds = sim.subpopulations[i - 1].individuals;
			fitness = sim.subpopulations[i - 1].cachedFitness(NULL);
			parents1 = sample(inds, N_prime, replace=T);
			parents2 = sample(inds, N_prime, replace=T);
			for (j in seqLen(N_prime))
				sim.subpopulations[i - 1].addCrossed(parents1[j], parents2[j]);
		}
	}
	self.active = 0;
}

1002:200000 late()
{
	if (sim.subpopulations[size(sim.subpopulations)-1].individualCount > 0){
		sim.addSubpop(size(sim.subpopulations)+1, 0);
	}
}

1001:200001 late()
{
	output_ticks = seq(from=1001,to=200001,by=50);
	if(match(community.tick, output_ticks) >= 0){
		defineGlobal("current_deme", (size(sim.subpopulations)-1));
		while(isNULL(mean(sim.subpopulations[current_deme].cachedFitness(NULL)))){
			defineGlobal("current_deme", (current_deme-1));
		}
		speed = (current_deme - previous_deme) / 50;
		defineGlobal("previous_deme", current_deme);
		fitness_start = mean(sim.subpopulations[1].cachedFitness(NULL));
		fitness_mid = mean(sim.subpopulations[round((current_deme-1)/2)].cachedFitness(NULL));
		fitness_edge = mean(sim.subpopulations[current_deme].cachedFitness(NULL));

		//log output
		if(community.tick == 1001){
			defineGlobal("fitness_scalar", mean(sim.subpopulations[current_deme-1].cachedFitness(NULL)));
			outDir = paste0(c("output/","diploid","_K-",K,"_m-",mig_rate,"_r-",r,"_u-",u,"_rho-",rho,"_bs-",b_s,"_ds-",d_s,"_g-",g_size,"/"));
			createDirectory(outDir);
			if(isNULL(readFile(paste0(outDir,"trackFile.txt")))){
				writeFile(paste0(outDir,"trackFile.txt"), "0", append = F);
				curr_rep = 0;
			}
			if(!isNULL(readFile(paste0(outDir,"trackFile.txt")))){
				trackFile = readFile(paste0(outDir,"trackFile.txt"));
				curr_rep = asInteger(trackFile[0])+1;
				writeFile(paste0(outDir,"trackFile.txt"), asString(curr_rep), append = F);
			}
			outfile = paste0(c(outDir,curr_rep,"_log.csv"));			
			log = community.createLogFile(outfile, logInterval=50);
 			log.addCycle(); 
			log.addCustomColumn("start_fitness", "mean(sim.subpopulations[1].cachedFitness(NULL));");
			log.addCustomColumn("mid_fitness", "mean(sim.subpopulations[round((current_deme-1)/2)].cachedFitness(NULL));");
			log.addCustomColumn("edge_fitness", "mean(sim.subpopulations[current_deme].cachedFitness(NULL));");
			log.addCustomColumn("current_deme", "current_deme;");
			
			// intitialize log  for fitnesses of each subpop
			defineGlobal("fitness_file", paste0(c(outDir,curr_rep,"_fitnesses.csv")));
			writeFile(fitness_file, paste(seq(from = 1, to = 2000, by = 1), sep=","), append = F);
			
		}
		//update fitness file
		sub_fitnesses = community.tick-1001;
		for (i in 2:size(sim.subpopulations)){
			temp_fitness = mean(sim.subpopulations[i-1].cachedFitness(NULL));
			
			if(isNULL(temp_fitness)){
				sub_fitnesses = c(sub_fitnesses, 0);
			}
			else{
				sub_fitnesses = c(sub_fitnesses, (temp_fitness/fitness_scalar));
			}
		}
		extra_pops = rep(0, (2000-size(sim.subpopulations)));
		fitness_line = c(sub_fitnesses, extra_pops);
		writeFile(fitness_file, paste(fitness_line, sep=","), append = T);
		
		//print to std out
		print("tick: " + community.tick + " time: " + time() + " start: " + fitness_start + " mid: " + fitness_mid + " edge: " + fitness_edge + " demes: " + current_deme + " speed: " + speed);
		}
}