initialize()
{
	//set inheritance
	defineGlobal("inheritance", "auto");
	//defineGlobal("dom_pattern", "DFE");
	//defineGlobal("dip_model", "diff"); // diploidization 
	//defineGlobal("remove_dip_muts", 1); // diploidization model


	//set population parameters
	//defineConstant("K", 100); // carrying-capacity density
	//defineConstant("mig_rate", 0.05); //mig rate
	//defineConstant("r", log(2)); //growth rate
	//defineConstant("u_del", 2.5e-8); // deleterious mutation_rate
	//defineConstant("u_dip", 2.5e-11); // diploidization mutation_rate
	//defineConstant("u_ben", 2.5e-9); // beneficial mutation_rate
	//defineConstant("b_s", 0.000); // beneficial selection coefficient
	//defineConstant("d_s", -0.0045); // deleterious selection coefficient
	//defineConstant("g_size", 999999); // genome size
	//defineConstant("dip_lambda", 0.5); // n_mutations required for dom model, lambda coefficient for diff model

	//tick to start expanding
	defineConstant("start_exp_tick", 2501); //make sure to change the 2 tick events triggered here if this changes too


	//set as nonWF model
	initializeSLiMModelType("nonWF");
	
	//set mutation rate, u_t is rate with all mutations
	if(b_s > 0)
	{
		defineGlobal("u_t", (u_del + (2*u_dip) + u_ben));
		defineConstant("rho", (u_del+u_ben));
	}
	else
	{
		defineGlobal("u_t", (u_del + (2*u_dip)));
		defineConstant("rho", (u_del));
	}

	//
	initializeMutationRate(u_t);
	
	//beneficial
	initializeMutationType("m1", 0.5, "f", 0.0);

	//deleterious
	initializeMutationType("m2", 0.5, "f", 0.0);

	initializeMutationType("m3", 0.5, "f", 0.0);
	m3.color = "cornflowerblue"; 

	initializeMutationType("m4", 0.5, "f", 0.0);

	//make sure mutations don't fix permanently
	m1.convertToSubstitution = F;
	m2.convertToSubstitution = F;
	m3.convertToSubstitution = F;
	m4.convertToSubstitution = F;

	if(b_s > 0)
		initializeGenomicElementType("g1", c(m1, m2, m3, m4), c((u_ben/u_t),(u_del/u_t),(u_dip/u_t),(u_dip/u_t)));
	else
		initializeGenomicElementType("g1", c(m2,m3,m4), c((u_del/u_t),(u_dip/u_t),(u_dip/u_t)));
	
	// uniform chromosome of length 10 kb with uniform recombination
	initializeGenomicElement(g1, 0, g_size);
	initializeRecombinationRate(rho);

	
	defineGlobal("c_tag", 0);
	defineGlobal("previous_deme", 0);
	source("src/model_functions.slim");

	// define heterozygote coefficients depending on inheritance and dominance pattern, if not DFE

	if(dom_pattern == "additive")
		defineGlobal("h_m1", c(0.0, 0.25, 0.5, 0.75, 1.0));
	if(dom_pattern == "recessive")
		defineGlobal("h_m1", c(0.0, 0.0, 0.0, 0.0, 1.0));
	if(dom_pattern == "duplex")
		defineGlobal("h_m1", c(0.0, 0.0, 0.0, 1.0, 1.0));
	if(dom_pattern == "br_dd")
		defineGlobal("h_m1", c(0.0, 0.0, 0.0, 0.0, 1.0));
	if(dom_pattern == "bd_dr")
		defineGlobal("h_m1", c(0.0, 1.0, 1.0, 1.0, 1.0));
	if(dom_pattern == "overdominance_1")
		defineGlobal("h_m1", c(0.0, 1.0, 1.0, 1.0, 0.0));
	if(dom_pattern == "overdominance_2")
		defineGlobal("h_m1", c(0.0, 1.0, 1.0, 1.0, 0.8));
	if(dom_pattern == "overdominance_3")
		defineGlobal("h_m1", c(0.0, 1.0, 1.0, 1.0, 0.5)); 
	if(dom_pattern == "underdominance_1")
		defineGlobal("h_m1", c(0.0, -0.5, -0.5, -0.5, 0.0)); 
	if(dom_pattern == "underdominance_2")
		defineGlobal("h_m1", c(0.0, -1.0, -1.0, -1.0, 0.0)); 

	if(dom_pattern == "additive")
		defineGlobal("h_m2", c(0.0, 0.25, 0.5, 0.75, 1.0));
	if(dom_pattern == "recessive")
		defineGlobal("h_m2", c(0.0, 0.0, 0.0, 0.0, 1.0));
	if(dom_pattern == "duplex")
		defineGlobal("h_m2", c(0.0, 0.0, 0.0, 1.0, 1.0));
	if(dom_pattern == "br_dd")
		defineGlobal("h_m2", c(0.0, 1.0, 1.0, 1.0, 1.0));
	if(dom_pattern == "bd_dr")
		defineGlobal("h_m2", c(0.0, 0.0, 0.0, 0.0, 1.0));
	if(dom_pattern == "overdominance_1")
		defineGlobal("h_m2", c(0.0, 1.0, 1.0, 1.0, 0.0));
	if(dom_pattern == "overdominance_2")
		defineGlobal("h_m2", c(0.0, 1.0, 1.0, 1.0, 0.8));
	if(dom_pattern == "overdominance_3")
		defineGlobal("h_m2", c(0.0, 1.0, 1.0, 1.0, 0.5));
	if(dom_pattern == "underdominance_1")
		defineGlobal("h_m2", c(0.0, -0.5, -0.5, -0.5, 1.0));
	if(dom_pattern == "underdominance_2")
		defineGlobal("h_m2", c(0.0, -1.0, -1.0, -1.0, 1.0)); 

}

mutation(m1)
{
	mut.setValue("exp_mutation_5", 0);
	mut.setValue("exp_mutation_1", 0);
	if(mut.originTick >= start_exp_tick){
		if(parent.getValue("pop") >= (size(sim.subpopulations)-4))
			mut.setValue("exp_mutation_5", 1);
		if(parent.getValue("pop") >= size(sim.subpopulations)-1)
			mut.setValue("exp_mutation_1", 1);
	}

	//DFE currently doesn't do anything with beneficial alleles
	if(dom_pattern=="DFE"){
		mut.setValue("s", 0.000);
		mut.setValue("h_m",c(0.0, 0.25, 0.5, 0.75, 1.0));
		/*
		if(inheritance=="diploid")
		{
			mut.setValue("dom", calc_h_from_s(mut.selectionCoeff, 0.978, 50328));
			mut.setValue("h_m",c(0,mut.getValue("dom"),1.0));
		}
		else
		{
			mut.setValue("dom", calc_h_from_s(mut.selectionCoeff, 0.978, 50328));
			mut.setValue("h_m",get_tetraploid_h_vector(1-mut.getValue("dom")));
		}
		*/
	}
	else{
		mut.setValue("s", b_s);
		mut.setValue("h_m",h_m1);
	}
	return T;

}

mutation(m2)
{
	mut.setValue("exp_mutation_5", 0);
	mut.setValue("exp_mutation_1", 0);
	if(mut.originTick >= start_exp_tick){
		if(parent.getValue("pop") >= (size(sim.subpopulations)-4))
			mut.setValue("exp_mutation_5", 1);
		if(parent.getValue("pop") >= size(sim.subpopulations)-1)
			mut.setValue("exp_mutation_1", 1);
	}

	if(dom_pattern=="DFE"){
		mut_s = rgamma(1,-0.001472,0.16);
		mut.setValue("s", mut_s);
		if(inheritance=="diploid")
		{
			mut.setValue("dom", calc_h_from_s(mut_s, 0.978, 50328));
			mut.setValue("h_m",c(0,mut.getValue("dom"),1.0));
		}
		else
		{
			mut.setValue("dom", calc_h_from_s(mut_s, 0.978, 50328));
			mut.setValue("h_m",get_tetraploid_h_vector(1-mut.getValue("dom")));
		}
	}
	else{
		mut.setValue("s", d_s);
		mut.setValue("h_m",h_m2);
	}
	return T;
}
fitnessEffect()
{
	if(individual.subpopulation == p1)
		return 1.0;
	
	genomes = c(individual.genomes,sim.subpopulations[0].individuals[individual.tag].genomes);
	mutations_ben = unique(genomes.mutationsOfType(m1));
	mutations_del = unique(genomes.mutationsOfType(m2));
	mutations = c(mutations_del,mutations_ben);
	if(size(mutations)==0)
		return 1.0;
	mut_counts = genomes.mutationCountsInGenomes(mutations);
	fit_vector = sapply(seqAlong(mutations), "mut = mutations[applyValue]; count = mut_counts[applyValue]; 1 + mut.getValue('h_m')[count] * mut.getValue('s');");
	return product(fit_vector);
}

mutation(m4)
{
	//if diff model, add all mutations
	if(dip_model == "diff")
		return T;
	// if we already have an m3 mutation at the site, allow
	// the new m4 mutation; we will remove the stack below
	if (genome.containsMarkerMutation(m3, mut.position))
		return T;

	// no m3 mutation is present, so unique down
	return DIP_MUTS[mut.position]; 
}

late() {
	if(dip_model == "dom")
	{	
		// implement back-mutations from A to a
		m4_muts = sim.mutationsOfType(m4);

		// do we have any m3 mutations segregating?
		// if so, we have m2/m3 stacked mutations to remove
		if (m4_muts.length() > 0)
		{
			genomes = sim.subpopulations.genomes;
			counts = genomes.countOfMutationsOfType(m4);
			hasStacked = genomes[counts > 0];

			for (genome in hasStacked)
			{
				stacked_m4 = genome.mutationsOfType(m4);
				stackPositions = stacked_m4.position;
				all_m3 = genome.mutationsOfType(m3);
				s = (match(all_m3.position, stackPositions) >= 0);
				stacked_m3 = all_m3[s];
				genome.removeMutations(c(stacked_m4, stacked_m3));
			}
		}
	}
}

1 early()
{
	print(inheritance);
	print(dom_pattern);
	print("k: " + K +  " r: " + r + " m: " + mig_rate + " reg_mu: " + u_del + " dip_mu: " + u_dip);
	//first deme holds extra chromosomes of every individual. individuals don't migrate from or into here
	sim.addSubpop(1, K*5);

	//initialize next 5 demes at carrying_capacity
	for (i in 2:6){
		sim.addSubpop(i, K);

		//create individual tags to keep track of chromosomes
		for(j in seqLen(sim.subpopulations[i - 1].individualCount)){
			defineGlobal("c_tag", (c_tag+1));
			//c_tag = runif(1);
			sim.subpopulations[i - 1].individuals[j].tagF = c_tag;
			sim.subpopulations[i - 1].individuals[j].setValue("pop", i);
			sim.subpopulations[0].individuals[j+((i-2)*K)].tagF = c_tag;
			sim.subpopulations[0].individuals[j+((i-2)*K)].setValue("pop", i);
			//sim.subpopulations[i - 1].individuals[j].tag = c_tag;
			sim.subpopulations[i - 1].individuals[j].setValue("mig",0);
		}
	}

	if(dip_model == "dom"){
		target = p1.genomes[0];
		target.addNewDrawnMutation(m3, 0:g_size);
 		defineConstant("DIP_MUTS", target.mutations); 
		target.removeMutations();
	}

}

survival(p1) {
// since p1 has fitness of 1 for calc purposes, we need to kill them if age is greater than 1

 if (individual.age == 0)
 	return T;
 return NULL;
}

1:2500 early()
{
	if(remove_dip_muts == 1)
	{
		dip_muts = sim.mutationsOfType(m3);
		neut_muts = sim.mutationsOfType(m4);
		sim.subpopulations.genomes.removeMutations(dip_muts);
		sim.subpopulations.genomes.removeMutations(neut_muts);
	}
}

//open up other populations after 10k generations

early()
{
	// parents die; offspring survive proportional to fitness (Generations discrete and non-overlapping)
	for (i in 1:size(sim.subpopulations))
	{
		inds = sim.subpopulations[i - 1].individuals;
		inds[inds.age > 0].fitnessScaling = 0.0;
	}
	allPopSizes = sim.subpopulations.individualCount;
	//all migration
	for (i in 2:(size(sim.subpopulations) - 1))
	{
		nIndividuals = allPopSizes[i-1];
		if (nIndividuals > 0){		
			nMigrants = rpois(1, nIndividuals * mig_rate);
			if (nMigrants >= 1){
				mig_inds = sim.subpopulations[i - 1].individuals[which(sim.subpopulations[i - 1].individuals.getValue("mig")==0)];
				if (size(mig_inds) >= 1){
					if(nMigrants > size(mig_inds))
						nMigrants = size(mig_inds);
					migrants = sample(mig_inds, nMigrants);
					for (migrant in migrants)
					{
						dest = sample(c(i,i-2),1);
						if(i==2)
							dest = i;
						if(i==6){
							if(community.tick < start_exp_tick)
								dest = i-2;
						}
						sim.subpopulations[i - 1].individuals.setValue("mig",1);
						sim.subpopulations[dest].takeMigrants(migrant);
						migrant.setValue("pop", i);
					}
				}
			}
		}
	}
}

//set reproduction
reproduction()
{
	
	//logistic growth
	for (i in 2:size(sim.subpopulations))
	{
		N_star = (exp(r) * sim.subpopulations[i - 1].individualCount) / (1 + ((exp(r) - 1) * sim.subpopulations[i - 1].individualCount / K));
		if (N_star > 0)
		{
			N_prime = rpois(1, N_star);
			inds = sim.subpopulations[i - 1].individuals;
			fitness = sim.subpopulations[i - 1].cachedFitness(NULL);
			parents1 = sample(inds, N_prime, replace=T);
			parents2 = sample(inds, N_prime, replace=T);
			if(dip_model == "diff")
			{
				for (j in seqLen(N_prime))
				{
					p1_chroms = c(parents1[j].genomes, sim.subpopulations[0].individuals[parents1[j].tag].genomes);
					p2_chroms = c(parents2[j].genomes, sim.subpopulations[0].individuals[parents2[j].tag].genomes);
					p1_recomb_a = c(0,1);
					p1_recomb_b = c(2,3);
					p2_recomb_a = c(0,1);
					p2_recomb_b = c(2,3);

					p1_order = sample(seqLen(4), 4);
					p2_order = sample(seqLen(4), 4);
					dip_muts_1 = unique(p1_chroms.mutationsOfType(m3));
					dip_muts_2 = unique(p2_chroms.mutationsOfType(m3));
					
					if(size(dip_muts_1) < 1){
						p1_recomb_a = c(p1_order[0], p1_order[1]);
						p1_recomb_b = c(p1_order[2], p1_order[3]);
						p1_probs = c(0.333,0.333,0.333);
					}
					else{
						//get number of unshared mutations of chromosomes to 1st sampled
						//p1_similarity = c(which(p1_chroms[p1_order[0]].mutationCountsInGenomes(dip_muts_1) != p1_chroms[p1_order[1]].mutationCountsInGenomes(dip_muts_1)), which(p1_chroms[p1_order[0]].mutationCountsInGenomes(dip_muts_1) == p1_chroms[p1_order[2]].mutationCountsInGenomes(dip_muts_1)), which(p1_chroms[p1_order[0]].mutationCountsInGenomes(dip_muts_1) == p1_chroms[p1_order[3]].mutationCountsInGenomes(dip_muts_1)));
						p1_a = size(which(p1_chroms[p1_order[0]].mutationCountsInGenomes(dip_muts_1) != p1_chroms[p1_order[1]].mutationCountsInGenomes(dip_muts_1)));
						p1_b = size(which(p1_chroms[p1_order[0]].mutationCountsInGenomes(dip_muts_1) != p1_chroms[p1_order[2]].mutationCountsInGenomes(dip_muts_1)));
						p1_c = size(which(p1_chroms[p1_order[0]].mutationCountsInGenomes(dip_muts_1) != p1_chroms[p1_order[3]].mutationCountsInGenomes(dip_muts_1)));
						
						//calculate probabilities based on negative exp model and differences between ref chromosome
						p1_probs = c(exp(-dip_lambda*p1_a),exp(-dip_lambda*p1_b),exp(-dip_lambda*p1_c));
						p1_probs = p1_probs / sum(p1_probs);
												
						//create weighted list to sample based on probabilities
						p1_prob_seq = c(rep(1, asInteger(round(1000*p1_probs[0]))), rep(2, asInteger(round(1000*p1_probs[1]))), rep(3, asInteger(round(1000*p1_probs[2]))));

						//sample recombinant
						p1_recomb_a = c(0,sample(p1_prob_seq, 1, replace = F));
						p1_recomb_b = seq(from = 1, to = 3, by = 1)[which(seq(from = 1, to = 3, by = 1) != p1_recomb_a[1])];

					}

					if(size(dip_muts_2) < 1){
						p2_recomb_a = c(p2_order[0], p2_order[1]);
						p2_recomb_b = c(p2_order[2], p2_order[3]);
						p2_probs = c(0.333,0.333,0.333);
					}

					else{
						//get number of unshared mutations of chromosomes to 1st sampled
						//p2_similarity = c(which(p2_chroms[p2_order[0]].mutationCountsInGenomes(dip_muts_2) == p2_chroms[p2_order[1]].mutationCountsInGenomes(dip_muts_2)), which(p2_chroms[p2_order[0]].mutationCountsInGenomes(dip_muts_2) == p2_chroms[p2_order[2]].mutationCountsInGenomes(dip_muts_2)), which(p2_chroms[p2_order[0]].mutationCountsInGenomes(dip_muts_2) == p2_chroms[p2_order[3]].mutationCountsInGenomes(dip_muts_2)));
						p2_a = size(which(p2_chroms[p2_order[0]].mutationCountsInGenomes(dip_muts_2) != p2_chroms[p2_order[1]].mutationCountsInGenomes(dip_muts_2)));
						p2_b = size(which(p2_chroms[p2_order[0]].mutationCountsInGenomes(dip_muts_2) != p2_chroms[p2_order[2]].mutationCountsInGenomes(dip_muts_2)));
						p2_c = size(which(p2_chroms[p2_order[0]].mutationCountsInGenomes(dip_muts_2) != p2_chroms[p2_order[3]].mutationCountsInGenomes(dip_muts_2)));


						//calculate probabilities based on negative exp model and differences between ref chromosome
						p2_probs = c(exp(-dip_lambda*p2_a),exp(-dip_lambda*p2_b),exp(-dip_lambda*p2_c));
						p2_probs = p2_probs / sum(p2_probs);
						//print(p2_probs);
						
						//create weighted list to sample based on probabilities
						p2_prob_seq = c(rep(1, asInteger(round(1000*p2_probs[0]))), rep(2, asInteger(round(1000*p2_probs[1]))), rep(3, asInteger(round(1000*p2_probs[2]))));

						//sample recombinant
						p2_recomb_a = c(0,sample(p2_prob_seq, 1, replace = F));
						p2_recomb_b = seq(from = 1, to = 3, by = 1)[which(seq(from = 1, to = 3, by = 1) != p2_recomb_a[1])];
					}					
					breakpoints1 = sim.chromosome.drawBreakpoints();
					breakpoints2 = sim.chromosome.drawBreakpoints();
					offspring = sim.subpopulations[i - 1].addRecombinant(p1_chroms[p1_recomb_a[0]], p1_chroms[p1_recomb_a[1]], breakpoints1, p2_chroms[p2_recomb_a[0]], p2_chroms[p2_recomb_a[1]], breakpoints2);
					breakpoints1 = sim.chromosome.drawBreakpoints();
					breakpoints2 = sim.chromosome.drawBreakpoints();
					other = sim.subpopulations[0].addRecombinant(p1_chroms[p1_recomb_b[0]], p1_chroms[p1_recomb_b[1]], breakpoints1, p2_chroms[p2_recomb_b[0]], p2_chroms[p2_recomb_b[1]], breakpoints2);
					defineGlobal("c_tag", (c_tag+1));
					//c_tag = runif(1);
					offspring.tagF = c_tag; //these aren't getting set for some reason
					other.tagF = c_tag;
					offspring.setValue("pop", i);
					offspring.setValue("dip_index", mean(c(((max(p1_probs)-0.333)/0.666),((max(p2_probs)-0.333)/0.666))));			
					other.setValue("pop", i);
					other.setValue("dip_index", "test");
					offspring.setValue("mig", 0);
				}
			}
			if(dip_model == "dom")
			{
				for (j in seqLen(N_prime))
				{
					p1_chroms = c(parents1[j].genomes, sim.subpopulations[0].individuals[parents1[j].tag].genomes);
					p2_chroms = c(parents2[j].genomes, sim.subpopulations[0].individuals[parents2[j].tag].genomes);
					p1_order = seq(from = 0, to = 3, by = 1);
					p2_order = seq(from = 0, to = 3, by = 1);

					dip_muts_1 = unique(p1_chroms.mutationsOfType(m3));
					dip_muts_2 = unique(p2_chroms.mutationsOfType(m3));					
					n_dip_muts_1 = size(which(p1_chroms.mutationCountsInGenomes(dip_muts_1)>0));
					n_dip_muts_2 = size(which(p2_chroms.mutationCountsInGenomes(dip_muts_2)>0));

					if(n_dip_muts_1 > dip_lambda)
						n_dip_muts_1 = dip_lambda;
					if(n_dip_muts_2 > dip_lambda)
						n_dip_muts_2 = dip_lambda;
					dip_prob_seq_1 = c(rep(1, n_dip_muts_1), rep(0,(dip_lambda-n_dip_muts_1)));
					dip_prob_seq_2 = c(rep(1, n_dip_muts_2), rep(0,(dip_lambda-n_dip_muts_2)));

					if(sample(dip_prob_seq_1, 1, replace = F) == 0)
						p1_order = sample(seqLen(4), 4);
					if(sample(dip_prob_seq_2, 1, replace = F) == 0)
						p2_order = sample(seqLen(4), 4);	

					breakpoints1 = sim.chromosome.drawBreakpoints();
					breakpoints2 = sim.chromosome.drawBreakpoints();
					offspring = sim.subpopulations[i - 1].addRecombinant(p1_chroms[p1_order[0]], p1_chroms[p1_order[1]], breakpoints1, p2_chroms[p2_order[0]], p2_chroms[p2_order[1]], breakpoints2);
					breakpoints1 = sim.chromosome.drawBreakpoints();
					breakpoints2 = sim.chromosome.drawBreakpoints();
					other = sim.subpopulations[0].addRecombinant(p1_chroms[p1_order[2]], p1_chroms[p1_order[3]], breakpoints1, p2_chroms[p2_order[2]], p2_chroms[p2_order[3]], breakpoints2);
					defineGlobal("c_tag", (c_tag+1));
					//c_tag = runif(1);
					offspring.tagF = c_tag; //these aren't getting set for some reason
					other.tagF = c_tag;
					offspring.setValue("pop", i);
					offspring.setValue("dip_index", mean(c(n_dip_muts_1/dip_lambda,n_dip_muts_2/dip_lambda)));				
					other.setValue("pop", i);
					offspring.setValue("mig", 0);
				}
			}
		}
	}
	self.active = 0;
}

2501:3501 late()
{
	if (sim.subpopulations[size(sim.subpopulations)-1].individualCount > 0){
		sim.addSubpop(size(sim.subpopulations)+1, 0);
	}
}

// need to set tags for new individuals after selection induced mortality
early(){

	inds = sim.subpopulations[seq(from = 1, to = (size(sim.subpopulations)-1), by = 1)].individuals;
	tag = match(inds.tagF, sim.subpopulations[0].individuals.tagF);
	inds.tag = tag;
}

2: late() {

	inds = sim.subpopulations[seq(from = 1, to = (size(sim.subpopulations)-1), by = 1)].individuals;
	tag = match(inds.tagF, sim.subpopulations[0].individuals.tagF);
	inds.tag = tag;
}

//do a quick check to make sure tags are right every 100 gens
101: first (){
	check_ticks = seq(from=101,to=200001,by=100);
	if(match(community.tick, check_ticks) >= 0){
		for (ind in sim.subpopulations[seq(from = 1, to = (size(sim.subpopulations)-1), by = 1)].individuals)
			if (ind.tagF != sim.subpopulations[0].individuals[ind.tag].tagF)
				stop("late(): error for individual " + ind.index);
	}
}

//do a quick check to make sure tags are right every 100 gens
101: early (){
	check_ticks = seq(from=101,to=200001,by=100);
	if(match(community.tick, check_ticks) >= 0){
		for (ind in sim.subpopulations[seq(from = 1, to = (size(sim.subpopulations)-1), by = 1)].individuals)
			if (ind.tagF != sim.subpopulations[0].individuals[ind.tag].tagF)
				stop("late(): error for individual " + ind.index);
	}
}

//do a quick check to make sure tags are right every 100 gens
101: late (){
	check_ticks = seq(from=101,to=200001,by=100);
	if(match(community.tick, check_ticks) >= 0){
		for (ind in sim.subpopulations[seq(from = 1, to = (size(sim.subpopulations)-1), by = 1)].individuals)
			if (ind.tagF != sim.subpopulations[0].individuals[ind.tag].tagF)
				stop("late(): error for individual " + ind.index);
	}
}
2501:3501 late()
{
	outDir_pre = paste0(c("output/paper_run/dip/diploidization-",dip_model,"_dipLambda-",dip_lambda,"_remDipMuts-",remove_dip_muts,"_",dom_pattern,"_K-",K,"_m-",mig_rate,"_r-",r,"_u_del-",u_del,"_u_ben-",u_ben,"_u_dip-",u_dip,"_rho-",rho,"_bs-",b_s,"_ds-",d_s,"_g-",g_size,"_start-",start_exp_tick,"/"));

	output_ticks = seq(from=start_exp_tick,to=200001,by=10);
	if(match(community.tick, output_ticks) >= 0)
		source("src/output_dip_dom.slim");
}