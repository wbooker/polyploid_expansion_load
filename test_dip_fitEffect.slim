initialize()
{
	//set inheritance
	defineGlobal("inheritance", "auto");
	//defineGlobal("dom_pattern", "DFE");
	//defineGlobal("dip_model", "diff"); // diploidization 
	//defineGlobal("remove_dip_muts", 1); // diploidization model
	defineGlobal("meiotic_fitness", 0); // does pairing efficiency affect fitness

	//set population parameters
	//defineConstant("K", 100); // carrying-capacity density
	//defineConstant("mig_rate", 0.05); //mig rate
	//defineConstant("r", log(2)); //growth rate
	//defineConstant("u_del", 2.5e-8); // deleterious mutation_rate
	//defineConstant("u_dip", 2.5e-11); // diploidization mutation_rate
	//defineConstant("u_ben", 2.5e-9); // beneficial mutation_rate
	//defineConstant("b_s", 0.000); // beneficial selection coefficient
	//defineConstant("d_s", -0.0045); // deleterious selection coefficient
	//defineConstant("g_size", 999999); // genome size
	//defineConstant("dip_lambda", 0.5); // n_mutations required for dom model, lambda coefficient for diff model


	if(dip_model == "diff")
	{
		remake_dips = 0;
		dip_pos = sort(sample(seq(0,g_size+dip_lambda,1), dip_lambda, replace = F));
		//dip_pos = asInteger(seq(round((((g_size+1)/2)-1)), g_size, by = round(g_size/dip_lambda)));
		if(dip_pos[0] == 0){
			remake_dips = 1;
		}
		if(dip_pos[size(dip_pos)-1] == (g_size+dip_lambda)){
			remake_dips = 1;
		}
			
		while(remake_dips == 1){
			remake_dips = 0;
			dip_pos = sort(sample(seq(0,g_size+dip_lambda,1), dip_lambda, replace = F));
			if(dip_pos[0] == 0){
				remake_dips = 1;
			}
			if(dip_pos[size(dip_pos)-1] == (g_size+dip_lambda)){
				remake_dips = 1;
			}
		}
		defineConstant("dip_positions", dip_pos);

		print(dip_positions);
	}

	//tick to start expanding
	defineConstant("start_exp_tick", 2501); //make sure to change the 2 tick events triggered here if this changes too


	//set as nonWF model
	initializeSLiMModelType("nonWF");
	
	//set mutation rate, u_t is rate with all mutations
	if(b_s > 0)
	{
		defineGlobal("u_t", (u_del + u_ben));
		defineConstant("rho", (u_del+u_ben));
	}
	else
	{
		defineGlobal("u_t", u_del);
		defineConstant("rho", (u_del));
		if(u_del < 1e-15)
			defineConstant("rho", 2.5e-8);
	}

	//
	
	//beneficial
	initializeMutationType("m1", 0.5, "f", 0.0);

	//deleterious
	initializeMutationType("m2", 0.5, "f", 0.0);

	initializeMutationType("m3", 0.5, "f", 0.0);
	m3.color = "cornflowerblue"; 

	initializeMutationType("m4", 0.5, "f", 0.0);

	//make sure mutations don't fix permanently
	m1.convertToSubstitution = F;
	m2.convertToSubstitution = F;
	m3.convertToSubstitution = F;
	m4.convertToSubstitution = F;
	m3.mutationStackPolicy = "f";

	if(b_s > 0)
		initializeGenomicElementType("g1", c(m1, m2), c((u_ben/u_t),(u_del/u_t)));
	else{
		initializeGenomicElementType("g1", c(m2), 1);
		initializeGenomicElementType("g2", c(m3,m4), c(1,1));
	}

	//need to create custom mutation rate map so that dip mutations are independent of reg mutations
	mut_map = 0;
	mut_rate = u_del;
	// uniform chromosome of length g_size+dip_lambda kb with uniform recombination
	for(pos in 0:(size(dip_positions)-1)){
		if(pos==0)
		{
				initializeGenomicElement(g1, 0, (dip_positions[pos]-1));
				initializeGenomicElement(g2, dip_positions[pos], dip_positions[pos]);
				mut_map = c(dip_positions[pos]-1, dip_positions[pos]);
				mut_rate = c(mut_rate, u_dip);
		}
		else{
			if(pos==(size(dip_positions)-1)){
				if(dip_positions[pos]==(dip_positions[pos-1]+1))
				{
					initializeGenomicElement(g2, dip_positions[pos], dip_positions[pos]);
					initializeGenomicElement(g1, dip_positions[pos]+1, (g_size + dip_lambda));
					mut_map[size(mut_map)-1] = mut_map[size(mut_map)-1]+1;
					mut_map = c(mut_map,(g_size+dip_lambda));
					mut_rate = c(mut_rate, u_del);
				}
				else
				{
					mut_rate = c(mut_rate, u_del,u_dip,u_del);
					mut_map = c(mut_map, dip_positions[pos]-1, dip_positions[pos],(g_size+dip_lambda));
					initializeGenomicElement(g1, dip_positions[pos-1]+1, (dip_positions[pos]-1));
					initializeGenomicElement(g2, dip_positions[pos], dip_positions[pos]);
					initializeGenomicElement(g1, dip_positions[pos]+1,(g_size + dip_lambda));
						
				}
			}
			else
			{
				if(dip_positions[pos]==(dip_positions[pos-1]+1))
				{
					initializeGenomicElement(g2, dip_positions[pos], dip_positions[pos]);
					//mut_rate = c(mut_rate, u_del,u_dip);
					mut_map[size(mut_map)-1] = mut_map[size(mut_map)-1]+1;
				}
				else
				{
					initializeGenomicElement(g1, dip_positions[pos-1]+1, (dip_positions[pos]-1));
					initializeGenomicElement(g2, dip_positions[pos], dip_positions[pos]);
					mut_rate = c(mut_rate, u_del,u_dip);
					mut_map = c(mut_map, dip_positions[pos]-1, dip_positions[pos]);		
				}
			}
		}
	}
	print(dip_positions);
	print(mut_rate);
	print(mut_map);
	initializeMutationRate(mut_rate,mut_map);
	//initializeGenomicElement(g1, 0, g_size);
	initializeRecombinationRate(rho);

	
	defineGlobal("c_tag", 0);
	defineGlobal("previous_deme", 0);
	source("src/model_functions.slim");

	// define heterozygote coefficients depending on inheritance and dominance pattern, if not DFE

	if(dom_pattern == "additive")
		defineGlobal("h_m1", c(0.0, 0.25, 0.5, 0.75, 1.0));
	if(dom_pattern == "recessive")
		defineGlobal("h_m1", c(0.0, 0.0, 0.0, 0.0, 1.0));
	if(dom_pattern == "duplex")
		defineGlobal("h_m1", c(0.0, 0.0, 0.0, 1.0, 1.0));
	if(dom_pattern == "br_dd")
		defineGlobal("h_m1", c(0.0, 0.0, 0.0, 0.0, 1.0));
	if(dom_pattern == "bd_dr")
		defineGlobal("h_m1", c(0.0, 1.0, 1.0, 1.0, 1.0));
	if(dom_pattern == "overdominance_1")
		defineGlobal("h_m1", c(0.0, 1.0, 1.0, 1.0, 0.0));
	if(dom_pattern == "overdominance_2")
		defineGlobal("h_m1", c(0.0, 1.0, 1.0, 1.0, 0.8));
	if(dom_pattern == "overdominance_3")
		defineGlobal("h_m1", c(0.0, 1.0, 1.0, 1.0, 0.5)); 
	if(dom_pattern == "underdominance_1")
		defineGlobal("h_m1", c(0.0, -0.5, -0.5, -0.5, 0.0)); 
	if(dom_pattern == "underdominance_2")
		defineGlobal("h_m1", c(0.0, -1.0, -1.0, -1.0, 0.0)); 

	if(dom_pattern == "additive")
		defineGlobal("h_m2", c(0.0, 0.25, 0.5, 0.75, 1.0));
	if(dom_pattern == "recessive")
		defineGlobal("h_m2", c(0.0, 0.0, 0.0, 0.0, 1.0));
	if(dom_pattern == "duplex")
		defineGlobal("h_m2", c(0.0, 0.0, 0.0, 1.0, 1.0));
	if(dom_pattern == "br_dd")
		defineGlobal("h_m2", c(0.0, 1.0, 1.0, 1.0, 1.0));
	if(dom_pattern == "bd_dr")
		defineGlobal("h_m2", c(0.0, 0.0, 0.0, 0.0, 1.0));
	if(dom_pattern == "overdominance_1")
		defineGlobal("h_m2", c(0.0, 1.0, 1.0, 1.0, 0.0));
	if(dom_pattern == "overdominance_2")
		defineGlobal("h_m2", c(0.0, 1.0, 1.0, 1.0, 0.8));
	if(dom_pattern == "overdominance_3")
		defineGlobal("h_m2", c(0.0, 1.0, 1.0, 1.0, 0.5));
	if(dom_pattern == "underdominance_1")
		defineGlobal("h_m2", c(0.0, -0.5, -0.5, -0.5, 1.0));
	if(dom_pattern == "underdominance_2")
		defineGlobal("h_m2", c(0.0, -1.0, -1.0, -1.0, 1.0)); 

}

mutation(m1)
{
	mut.setValue("exp_mutation_5", 0);
	mut.setValue("exp_mutation_1", 0);
	if(mut.originTick >= start_exp_tick){
		if(parent.getValue("pop") >= (size(sim.subpopulations)-4))
			mut.setValue("exp_mutation_5", 1);
		if(parent.getValue("pop") >= size(sim.subpopulations)-1)
			mut.setValue("exp_mutation_1", 1);
	}

	//DFE currently doesn't do anything with beneficial alleles
	if(dom_pattern=="DFE"){
		mut.setValue("s", 0.000);
		mut.setValue("h_m",c(0.0, 0.25, 0.5, 0.75, 1.0));
		/*
		if(inheritance=="diploid")
		{
			mut.setValue("dom", calc_h_from_s(mut.selectionCoeff, 0.978, 50328));
			mut.setValue("h_m",c(0,mut.getValue("dom"),1.0));
		}
		else
		{
			mut.setValue("dom", calc_h_from_s(mut.selectionCoeff, 0.978, 50328));
			mut.setValue("h_m",get_tetraploid_h_vector(1-mut.getValue("dom")));
		}
		*/
	}
	else{
		mut.setValue("s", b_s);
		mut.setValue("h_m",h_m1);
	}
	return T;

}

mutation(m2)
{
	mut.setValue("exp_mutation_5", 0);
	mut.setValue("exp_mutation_1", 0);
	if(mut.originTick >= start_exp_tick){
		if(parent.getValue("pop") >= (size(sim.subpopulations)-4))
			mut.setValue("exp_mutation_5", 1);
		if(parent.getValue("pop") >= size(sim.subpopulations)-1)
			mut.setValue("exp_mutation_1", 1);
	}

	if(dom_pattern=="DFE"){
		mut_s = rgamma(1,-0.001472,0.16);
		mut.setValue("s", mut_s);
		if(inheritance=="diploid")
		{
			mut.setValue("dom", calc_h_from_s(mut_s, 0.978, 50328));
			mut.setValue("h_m",c(0,mut.getValue("dom"),1.0));
		}
		else
		{
			mut.setValue("dom", calc_h_from_s(mut_s, 0.978, 50328));
			mut.setValue("h_m",get_tetraploid_h_vector(1-mut.getValue("dom")));
		}
	}
	else{
		mut.setValue("s", d_s);
		mut.setValue("h_m",h_m2);
	}
	return T;
}
fitnessEffect()
{
	if(individual.subpopulation == p1)
		return 1.0;
	
	genomes = c(individual.genomes,sim.subpopulations[0].individuals[individual.tag].genomes);
	mutations_ben = unique(genomes.mutationsOfType(m1));
	mutations_del = unique(genomes.mutationsOfType(m2));
	mutations = c(mutations_del,mutations_ben);
	if(size(mutations)==0)
		return 1.0;
	mut_counts = genomes.mutationCountsInGenomes(mutations);
	fit_vector = sapply(seqAlong(mutations), "mut = mutations[applyValue]; count = mut_counts[applyValue]; 1 + mut.getValue('h_m')[count] * mut.getValue('s');");
	return product(fit_vector);
}

mutation(m3){
	//if dom model, add all mutations
	if(match(mut.position, dip_positions) <= 0)
		return F;

	//if at a proposed dip locus, add mutation
	if(dip_model == "dom")
		return T; 
	if(dip_model == "diff")
		return T; 
	// otherwise don't add mutation
	return F;
}

mutation(m4)
{
	// if we already have an m3 mutation at the site, allow
	// the new m4 mutation; we will remove the stack below
	if(match(mut.position, dip_positions) <= 0)
		return F;
	if (genome.containsMarkerMutation(m3, mut.position))
		return T;
	// no m3 mutation is present, so unique down
	if(dip_model == "dom")
		return DIP_MUTS[mut.position]; 
	if(dip_model == "diff")
		return DIP_MUTS[which(dip_positions==mut.position)]; 

}

late() {
	// implement back-mutations from A to a
	m4_muts = sim.mutationsOfType(m4);

	// do we have any m3 mutations segregating?
	// if so, we have m3/m4 stacked mutations to remove
	if (m4_muts.length() > 0)
	{
		genomes = sim.subpopulations.genomes;
		counts = genomes.countOfMutationsOfType(m4);
		hasStacked = genomes[counts > 0];

		for (genome in hasStacked)
		{
			stacked_m4 = genome.mutationsOfType(m4);
			stackPositions = stacked_m4.position;
			all_m3 = genome.mutationsOfType(m3);
			s = (match(all_m3.position, stackPositions) >= 0);
			stacked_m3 = all_m3[s];
			genome.removeMutations(c(stacked_m4, stacked_m3));
		}
	}
}


1 early()
{
	print(inheritance);
	print(dom_pattern);
	print("k: " + K +  " r: " + r + " m: " + mig_rate + " reg_mu: " + u_del + " dip_mu: " + u_dip);
	//first deme holds extra chromosomes of every individual. individuals don't migrate from or into here
	sim.addSubpop(1, K*5);

	//initialize next 5 demes at carrying_capacity
	for (i in 2:6){
		sim.addSubpop(i, K);

		//create individual tags to keep track of chromosomes
		for(j in seqLen(sim.subpopulations[i - 1].individualCount)){
			defineGlobal("c_tag", (c_tag+1));
			//c_tag = runif(1);
			sim.subpopulations[i - 1].individuals[j].tagF = c_tag;
			sim.subpopulations[i - 1].individuals[j].setValue("pop", i);
			sim.subpopulations[i - 1].individuals[j].setValue("og_pop", i);
			sim.subpopulations[0].individuals[j+((i-2)*K)].tagF = c_tag;
			sim.subpopulations[0].individuals[j+((i-2)*K)].setValue("pop", i);
			//sim.subpopulations[i - 1].individuals[j].tag = c_tag;
			sim.subpopulations[i - 1].individuals[j].setValue("mig",0);
		}
	}

	if(dip_model == "dom"){
		target = p1.genomes[0];
		target.addNewDrawnMutation(m3, 0:g_size);
 		defineConstant("DIP_MUTS", target.mutations); 
		target.removeMutations();
	}

	if(dip_model == "diff"){
		target = p1.genomes[0];
		target.addNewDrawnMutation(m3, dip_positions);
 		defineConstant("DIP_MUTS", target.mutations); 
		target.removeMutations();
	}

}

survival(p1) {
// since p1 has fitness of 1 for calc purposes, we need to kill them if age is greater than 1

 if (individual.age == 0)
 	return T;
 return NULL;
}

1:2500 early()
{
	if(remove_dip_muts == 1)
	{
		dip_muts = sim.mutationsOfType(m3);
		neut_muts = sim.mutationsOfType(m4);
		sim.subpopulations.genomes.removeMutations(dip_muts);
		sim.subpopulations.genomes.removeMutations(neut_muts);
	}
}

//open up other populations after 10k generations


early()
{
	// parents die; offspring survive proportional to fitness (Generations discrete and non-overlapping)
	for (i in 1:size(sim.subpopulations))
	{
		inds = sim.subpopulations[i - 1].individuals;
		inds[inds.age > 0].fitnessScaling = 0.0;
	}
	allPopSizes = sim.subpopulations.individualCount;
	//all migration
	for (i in 2:(size(sim.subpopulations)))
	{
		nIndividuals = allPopSizes[i-1];
		if (nIndividuals > 0){		
			nMigrants = rpois(1, nIndividuals * mig_rate);
			if (nMigrants >= 1){
				mig_inds = sim.subpopulations[i - 1].individuals[which(sim.subpopulations[i - 1].individuals.getValue("mig")==0)];
				if (size(mig_inds) >= 1){
					if(nMigrants > size(mig_inds))
						nMigrants = size(mig_inds);
					migrants = sample(mig_inds, nMigrants);
					for (migrant in migrants)
					{
						dest = sample(c(i,i-2),1);
						if(i==2)
							dest = i;
						if(i==6){
							if(community.tick < start_exp_tick){
								dest = i-2;
							}
						}
						migrant.setValue("mig",1);
						sim.subpopulations[dest].takeMigrants(migrant);
						migrant.setValue("pop", i);
					}
				}
			}
		}
	}
}


//set reproduction

//set reproduction
reproduction()
{
	
	//logistic growth
	for (i in 2:size(sim.subpopulations))
	{
		//calculate number of offspring to produce
		N_star = (exp(r) * sim.subpopulations[i - 1].individualCount) / (1 + ((exp(r) - 1) * sim.subpopulations[i - 1].individualCount / K));
		if (N_star > 0)
		{
			//draw number of offspring from poisson and sample parents for reproduction
			N_prime = rpois(1, N_star);
			inds = sim.subpopulations[i - 1].individuals;
			parents1 = sample(inds, N_prime, replace=T);
			parents2 = sample(inds, N_prime, replace=T);
			if(dip_model == "diff")
			{
				//cycle through parent combos to generate offspring
				for (j in seqLen(N_prime))
				{
					produce_gametes = 1;
					repro_fail = 0;

					//go into while loop to ensure if gametes produced die we cycle until a viable offspring is made
					while(produce_gametes == 1){
						p1_chroms = c(parents1[j].genomes, sim.subpopulations[0].individuals[parents1[j].tag].genomes);
						p2_chroms = c(parents2[j].genomes, sim.subpopulations[0].individuals[parents2[j].tag].genomes);
						p1_chroms = sample(p1_chroms, 4, F);
						p2_chroms = sample(p2_chroms, 4, F);

						abcd_pairs = c(0,1,2,3);
						acbd_pairs = c(0,2,1,3);
						adbc_pairs = c(0,3,1,2);

						dip_muts_1 = unique(p1_chroms.mutationsOfType(m3));
						dip_muts_2 = unique(p2_chroms.mutationsOfType(m3));
						
						// if no diploidization mutations then pairing is random as previously shuffled
						if(size(dip_muts_1) < 1){
							p1_order = c(0,1,2,3);
							p1_pair = 100;
							p1_index = 0;
						}
						else{
						//get number of shared mutations of chromosomes to 1st sampled
							p_ab = dip_lambda - size(get_same_position_m3(p1_chroms[0], p1_chroms[1], dip_positions));
							p_ac = dip_lambda - size(get_same_position_m3(p1_chroms[0], p1_chroms[2], dip_positions));
							p_ad = dip_lambda - size(get_same_position_m3(p1_chroms[0], p1_chroms[3], dip_positions));
							p_bc = dip_lambda - size(get_same_position_m3(p1_chroms[1], p1_chroms[2], dip_positions));
							p_bd = dip_lambda - size(get_same_position_m3(p1_chroms[1], p1_chroms[3], dip_positions));
							p_cd = dip_lambda - size(get_same_position_m3(p1_chroms[2], p1_chroms[3], dip_positions));

							//calculate pairing efficiency
							p_ab = 	get_pairing_efficiency(p_ab / dip_lambda * 100);
							p_ac = 	get_pairing_efficiency(p_ac / dip_lambda * 100);
							p_ad = 	get_pairing_efficiency(p_ad / dip_lambda * 100);
							p_bc = 	get_pairing_efficiency(p_bc / dip_lambda * 100);
							p_bd = 	get_pairing_efficiency(p_bd / dip_lambda * 100);
							p_cd = 	get_pairing_efficiency(p_cd / dip_lambda * 100);

							//choose pairs weighted on pairing efficiency
							p_abcd = mean(c(p_ab, p_cd));
							p_acbd = mean(c(p_ac, p_bd));
							p_adbc = mean(c(p_ad, p_bc));
							p1_index = sort(c(p_abcd,p_acbd,p_adbc));
							p1_index = p1_index[2] - p1_index[1];

							p_pairs = sample(c(1,2,3),1,F,c(p_abcd,p_acbd,p_adbc));
							
							if(p_pairs == 1){
								p1_order = abcd_pairs;
								p1_pair = p_abcd;
							}

							if(p_pairs == 2){
								p1_order = acbd_pairs;
								p1_pair = p_acbd;
							}
							if(p_pairs == 3){
								p1_order = adbc_pairs;
								p1_pair = p_adbc;
						}
					}
						// if no diploidization mutations then pairing is random as previously shuffled
						if(size(dip_muts_2) < 1){
							p2_order = c(0,1,2,3);
							p2_pair = 100;
							p2_index = 0;
						}

						else{
							//get number of shared mutations of chromosomes to 1st sampled
							
							p_ab = dip_lambda - size(get_same_position_m3(p2_chroms[0], p2_chroms[1], dip_positions));
							p_ac = dip_lambda - size(get_same_position_m3(p2_chroms[0], p2_chroms[2], dip_positions));
							p_ad = dip_lambda - size(get_same_position_m3(p2_chroms[0], p2_chroms[3], dip_positions));
							p_bc = dip_lambda - size(get_same_position_m3(p2_chroms[1], p2_chroms[2], dip_positions));
							p_bd = dip_lambda - size(get_same_position_m3(p2_chroms[1], p2_chroms[3], dip_positions));
							p_cd = dip_lambda - size(get_same_position_m3(p2_chroms[2], p2_chroms[3], dip_positions));

							//calculate pairing efficiency
							p_ab = 	get_pairing_efficiency(p_ab / dip_lambda * 100);
							p_ac = 	get_pairing_efficiency(p_ac / dip_lambda * 100);
							p_ad = 	get_pairing_efficiency(p_ad / dip_lambda * 100);
							p_bc = 	get_pairing_efficiency(p_bc / dip_lambda * 100);
							p_bd = 	get_pairing_efficiency(p_bd / dip_lambda * 100);
							p_cd = 	get_pairing_efficiency(p_cd / dip_lambda * 100);

							//choose pairs weighted on pairing efficiency
							p_abcd = mean(c(p_ab, p_cd));
							p_acbd = mean(c(p_ac, p_bd));
							p_adbc = mean(c(p_ad, p_bc));
							p2_index = sort(c(p_abcd,p_acbd,p_adbc));
							p2_index = p2_index[2] - p2_index[1];

							p_pairs = sample(c(1,2,3),1,F,c(p_abcd,p_acbd,p_adbc));
							if(p_pairs == 1){
								p2_order = abcd_pairs;
								p2_pair = p_abcd;
							}

							if(p_pairs == 2){
								p2_order = acbd_pairs;
								p2_pair = p_acbd;
							}

							if(p_pairs == 3){
								p2_order = adbc_pairs;
								p2_pair = p_adbc;
							}
						}
	
						//average pair fitness for each parent and determine if offspring survived 
						pair_fitness = (p1_pair / 100) * (p2_pair / 100);

						if(repro_fail == 0){
							first_pair_efficiency = pair_fitness;
						}

						if(pair_fitness != 0){
						offspring_survived = sample(c(0,1),1,F,c((1-pair_fitness),pair_fitness));
						}
						else{
							offspring_survived = 0;
						}
						if(meiotic_fitness == 0)
							offspring_survived = 1;

						//if offspring survive generate individual and exit while loop
						if(offspring_survived == 1){
							breakpoints1 = sim.chromosome.drawBreakpoints();
							breakpoints2 = sim.chromosome.drawBreakpoints();
							offspring = sim.subpopulations[i - 1].addRecombinant(p1_chroms[p1_order[0]], p1_chroms[p1_order[1]], breakpoints1, p2_chroms[p2_order[0]], p2_chroms[p2_order[1]], breakpoints2);
							breakpoints1 = sim.chromosome.drawBreakpoints();
							breakpoints2 = sim.chromosome.drawBreakpoints();
							other = sim.subpopulations[0].addRecombinant(p1_chroms[p1_order[2]], p1_chroms[p1_order[3]], breakpoints1, p2_chroms[p2_order[2]], p2_chroms[p2_order[3]], breakpoints2);
							defineGlobal("c_tag", (c_tag+1));
							//c_tag = runif(1);
							offspring.tagF = c_tag; //these aren't getting set for some reason
							other.tagF = c_tag;
							offspring.setValue("pop", i);
							offspring.setValue("og_pop", i);
							other.setValue("pop", i);
							offspring.setValue("mig", 0);
							offspring.setValue("dip_index", (mean(c(p1_index, p2_index))/100));
							offspring.setValue("initial_efficiency", first_pair_efficiency);
							offspring.setValue("mig_parent", 0);
							offspring.setValue("repro_fails", repro_fail);
							if(parents1[j].getValue("og_pop") == (i-1)){
								offspring.setValue("mig_parent", 1);
							}	
							if(parents2[j].getValue("og_pop") == (i-1)){
								offspring.setValue("mig_parent", 1);
							}						
							produce_gametes = 0;
						}

						//if offpsring do not survive sample new parents and cycle back through while loop
						else{
							repro_fail = repro_fail + 1;
							parents1[j] = sample(inds, 1, replace=F);
							parents2[j] = sample(inds, 1, replace=F);
						}
					}
				}
			}
			if(dip_model == "dom")
			{
				for (j in seqLen(N_prime))
				{
					p1_chroms = c(parents1[j].genomes, sim.subpopulations[0].individuals[parents1[j].tag].genomes);
					p2_chroms = c(parents2[j].genomes, sim.subpopulations[0].individuals[parents2[j].tag].genomes);
					p1_order = seq(from = 0, to = 3, by = 1);
					p2_order = seq(from = 0, to = 3, by = 1);

					dip_muts_1 = unique(p1_chroms.mutationsOfType(m3));
					dip_muts_2 = unique(p2_chroms.mutationsOfType(m3));					
					n_dip_muts_1 = size(which(p1_chroms.mutationCountsInGenomes(dip_muts_1)>0));
					n_dip_muts_2 = size(which(p2_chroms.mutationCountsInGenomes(dip_muts_2)>0));

					if(n_dip_muts_1 > dip_lambda)
						n_dip_muts_1 = dip_lambda;
					if(n_dip_muts_2 > dip_lambda)
						n_dip_muts_2 = dip_lambda;
					dip_prob_seq_1 = c(rep(1, n_dip_muts_1), rep(0,(dip_lambda-n_dip_muts_1)));
					dip_prob_seq_2 = c(rep(1, n_dip_muts_2), rep(0,(dip_lambda-n_dip_muts_2)));

					if(sample(dip_prob_seq_1, 1, replace = F) == 0)
						p1_order = sample(seqLen(4), 4);
					if(sample(dip_prob_seq_2, 1, replace = F) == 0)
						p2_order = sample(seqLen(4), 4);	

					breakpoints1 = sim.chromosome.drawBreakpoints();
					breakpoints2 = sim.chromosome.drawBreakpoints();
					offspring = sim.subpopulations[i - 1].addRecombinant(p1_chroms[p1_order[0]], p1_chroms[p1_order[1]], breakpoints1, p2_chroms[p2_order[0]], p2_chroms[p2_order[1]], breakpoints2);
					breakpoints1 = sim.chromosome.drawBreakpoints();
					breakpoints2 = sim.chromosome.drawBreakpoints();
					other = sim.subpopulations[0].addRecombinant(p1_chroms[p1_order[2]], p1_chroms[p1_order[3]], breakpoints1, p2_chroms[p2_order[2]], p2_chroms[p2_order[3]], breakpoints2);					defineGlobal("c_tag", (c_tag+1));
					offspring.tagF = c_tag; //these aren't getting set for some reason
					other.tagF = c_tag;
					offspring.setValue("pop", i);
					offspring.setValue("dip_index", mean(c(n_dip_muts_1/dip_lambda,n_dip_muts_2/dip_lambda)));				
					other.setValue("pop", i);
					offspring.setValue("mig", 0);
				}
			}
		}
	}
	self.active = 0;
}

2500:3501 late()
{
	if (sim.subpopulations[size(sim.subpopulations)-1].individualCount > 0){
		sim.addSubpop(size(sim.subpopulations)+1, 0);
	}
}

// need to set tags for new individuals after selection induced mortality
early(){

	inds = sim.subpopulations[seq(from = 1, to = (size(sim.subpopulations)-1), by = 1)].individuals;
	tag = match(inds.tagF, sim.subpopulations[0].individuals.tagF);
	inds.tag = tag;
}

2: late() {

	inds = sim.subpopulations[seq(from = 1, to = (size(sim.subpopulations)-1), by = 1)].individuals;
	tag = match(inds.tagF, sim.subpopulations[0].individuals.tagF);
	inds.tag = tag;
}

//do a quick check to make sure tags are right every 100 gens
101: first (){
	check_ticks = seq(from=101,to=200001,by=100);
	if(match(community.tick, check_ticks) >= 0){
		for (ind in sim.subpopulations[seq(from = 1, to = (size(sim.subpopulations)-1), by = 1)].individuals)
			if (ind.tagF != sim.subpopulations[0].individuals[ind.tag].tagF)
				stop("late(): error for individual " + ind.index);
	}
}

//do a quick check to make sure tags are right every 100 gens
101: early (){
	check_ticks = seq(from=101,to=200001,by=100);
	if(match(community.tick, check_ticks) >= 0){
		for (ind in sim.subpopulations[seq(from = 1, to = (size(sim.subpopulations)-1), by = 1)].individuals)
			if (ind.tagF != sim.subpopulations[0].individuals[ind.tag].tagF)
				stop("late(): error for individual " + ind.index);
	}
}

//do a quick check to make sure tags are right every 100 gens
101: late (){
	check_ticks = seq(from=101,to=200001,by=100);
	if(match(community.tick, check_ticks) >= 0){
		for (ind in sim.subpopulations[seq(from = 1, to = (size(sim.subpopulations)-1), by = 1)].individuals)
			if (ind.tagF != sim.subpopulations[0].individuals[ind.tag].tagF)
				stop("late(): error for individual " + ind.index);
	}
}
2501:3501 late()
{
	outDir_pre = paste0(c("output/paper_run/pair_fit_dip_FIXED/no_exp_load/diploidization-",dip_model,"_dipLambda-",dip_lambda,"_remDipMuts-",remove_dip_muts,"_",dom_pattern,"_K-",K,"_m-",mig_rate,"_r-",r,"_u_del-",u_del,"_u_ben-",u_ben,"_u_dip-",u_dip,"_rho-",rho,"_bs-",b_s,"_ds-",d_s,"_g-",g_size,"_start-",start_exp_tick,"/"));

	output_ticks = seq(from=start_exp_tick,to=200001,by=10);
	if(match(community.tick, output_ticks) >= 0)
		source("src/output_dip.slim");
}