

function (float)get_dip_fit_ratio(lifso x)
{
	// retrieves the ratio of fitness between diploidized and non-diploidized individuals in the population
	if(size(x.individuals) < 1)
		return c(0.0,0.0);
	dip_index = x.individuals.getValue("dip_index");
	reg_inds = which(dip_index < 0.5);
	half_inds = which(dip_index == 0.5);
	full_inds = which(dip_index > 0.5);

	if(isNULL(mean(x.cachedFitness(reg_inds))))
		return c(0.0,0.0);

	if(isNULL(mean(x.cachedFitness(half_inds))))
		half_ratio = 0.0;
	else
		half_ratio = mean(x.cachedFitness(half_inds))/mean(x.cachedFitness(reg_inds));

	if(isNULL(mean(x.cachedFitness(full_inds))))
		full_ratio = 0.0;
	else
		full_ratio = mean(x.cachedFitness(full_inds))/mean(x.cachedFitness(reg_inds));

	return c(half_ratio, full_ratio);
}

function (float)get_sfs(lifso x)
{
	//gets site frequency spectrum of the focal clade and the two clades surrounding
	tags = sim.subpopulations[(x-2):(x+2)].individuals.tag;
	genomes = c(sim.subpopulations[(x-2):(x+2)].genomes,sim.subpopulations[0].individuals[tags].genomes);
	if(size(genomes)<1)
		return NULL;
	mutations_ben = unique(genomes.mutationsOfType(m1));
	mutations_del = unique(genomes.mutationsOfType(m2));
	freqs = genomes.mutationFrequenciesInGenomes(c(mutations_ben,mutations_del));
	if(inheritance == "diploid")
		//multiply by two here because we have 2 empty dip chromosomes
		return freqs * 2;
	
	else
		return freqs;
}

function (float)get_sfs_single(lifso x)
{
	//gets site frequency spectrum of the focal clade and the two clades surrounding
	tags = sim.subpopulations[x-1].individuals.tag;
	genomes = c(sim.subpopulations[x-1].genomes,sim.subpopulations[0].individuals[tags].genomes);
	if(size(genomes)<1)
		return NULL;
	mutations_ben = unique(genomes.mutationsOfType(m1));
	mutations_del = unique(genomes.mutationsOfType(m2));
	freqs = genomes.mutationFrequenciesInGenomes(c(mutations_ben,mutations_del));
	if(inheritance == "diploid")
		//multiply by two here because we have 2 empty dip chromosomes
		return freqs * 2;
	
	else
		return freqs;
}


function(float)get_pairing_efficiency(lifso x)
{
	return asFloat(8/(0.08 + 80*exp((78 - x))));
}

function (float)get_selection_frequency_spectrum(lifso x)
{
	//gets selection coefficient frequency spectrum of the focal clade and the two clades surrounding
	tags = sim.subpopulations[(x-2):(x+2)].individuals.tag;
	genomes = c(sim.subpopulations[(x-2):(x+2)].genomes,sim.subpopulations[0].individuals[tags].genomes);
	if(size(genomes)<1)
		return NULL;
	mutations_ben = unique(genomes.mutationsOfType(m1));
	mutations_del = unique(genomes.mutationsOfType(m2));
	mutations = c(mutations_del,mutations_ben);
	if(size(mutations)<1)
		return NULL;
	s = mutations.getValue("s");
	return s;
}

function (float)get_h_frequency_spectrum(lifso x)
{
	//gets selection coefficient frequency spectrum of the focal clade and the two clades surrounding
	tags = sim.subpopulations[(x-2):(x+2)].individuals.tag;
	genomes = c(sim.subpopulations[(x-2):(x+2)].genomes,sim.subpopulations[0].individuals[tags].genomes);
	if(size(genomes)<1)
		return NULL;
	mutations_ben = unique(genomes.mutationsOfType(m1));
	mutations_del = unique(genomes.mutationsOfType(m2));
	mutations = c(mutations_del,mutations_ben);
	h = mutations.getValue("dom");
	return h;
}

function (float)get_selection_frequency_spectrum_single(lifso x)
{
	//gets selection coefficient frequency spectrum of the focal clade and the two clades surrounding
	tags = sim.subpopulations[x-1].individuals.tag;
	genomes = c(sim.subpopulations[x-1].genomes,sim.subpopulations[0].individuals[tags].genomes);
	if(size(genomes)<1)
		return NULL;
	mutations_ben = unique(genomes.mutationsOfType(m1));
	mutations_del = unique(genomes.mutationsOfType(m2));
	mutations = c(mutations_del,mutations_ben);
	if(size(mutations)<1)
		return NULL;
	s = mutations.getValue("s");
	return s;
}

function (float)get_h_frequency_spectrum_single(lifso x)
{
	//gets selection coefficient frequency spectrum of the focal clade and the two clades surrounding
	tags = sim.subpopulations[x-1].individuals.tag;
	genomes = c(sim.subpopulations[x-1].genomes,sim.subpopulations[0].individuals[tags].genomes);
	if(size(genomes)<1)
		return NULL;
	mutations_ben = unique(genomes.mutationsOfType(m1));
	mutations_del = unique(genomes.mutationsOfType(m2));
	mutations = c(mutations_del,mutations_ben);
	h = mutations.getValue("dom");
	return h;
}


function (integer)hartigan_dip_test_list(lifso<Subpopulation> x){
	n = size(x.individuals);

	if(n <= 5){
		return NULL;
	}
	if(n < 40)
		n_sampled = n;
	else
		n_sampled = 40;

	// create sorted list of mutational difference comparisons

	inds = sample(x.individuals, n_sampled, replace=F);
	other = sim.subpopulations[0].individuals[inds.tag];
	genomes = c(inds.genomes, other.genomes);
	dip_muts_1 = unique(genomes.mutationsOfType(m3));
	for(i in 0:(size(genomes)-1)){
		samples = seq(0,(size(genomes)-1))[which(seq(0,(size(genomes)-1))!=i)];
		
		comp_genomes = genomes[sample(samples,20,replace=F)];
		for(j in 0:(size(comp_genomes)-1)){
			if(i == 0){
				if(j == 0){
					diff_vector = size(get_same_position_m3(genomes[i], comp_genomes[j], dip_positions));
				}
				else{
					diff_vector = c(diff_vector, size(get_same_position_m3(genomes[i], comp_genomes[j], dip_positions)));
				}
			}
			else{
				diff_vector = c(diff_vector, size(get_same_position_m3(genomes[i], comp_genomes[j], dip_positions)));
			}
		}
	}
	 return diff_vector;
}


function (integer)get_same_position_m3(lifso genome_a, lifso genome_b, lifso positions)
{
	pos_a = match(positions,genome_a.positionsOfMutationsOfType(m3)) != -1;
	pos_b = match(positions,genome_b.positionsOfMutationsOfType(m3)) != -1;

	return which(pos_a != pos_b);
}


function (float)calc_fitness_exp_load(lifso<Subpopulation> x)
{
	
	expansion_fitness = 0;
	ind_flag = 0;
	s_exp_1=0;
	s_exp_5=0;
	s_all=0;
	if(size(x.individuals) > 0){
		for(ind in x.individuals)
		{
			genomes = c(ind.genomes,sim.subpopulations[0].individuals[ind.tag].genomes);
			exp_mutations_1_flag = 0;
			exp_mutations_5_flag = 0;
			s_exp_1=1;
			s_exp_5=1;
			s_all=1;
			mutations_ben = unique(genomes.mutationsOfType(m1));
			mutations_del = unique(genomes.mutationsOfType(m2));
			mutations = c(mutations_del,mutations_ben);

			for(mut in mutations)
			{
				if (mut.getValue("exp_mutation_1") == 1)
				{
					if(exp_mutations_1_flag == 0)
					{
						exp_mutations_1 = mut;
						exp_mutations_1_flag = 1;
					}
					else
					{
						exp_mutations_1 = c(exp_mutations_1, mut);
					}
				}
				
				if (mut.getValue("exp_mutation_5") == 1)
				{
					if(exp_mutations_5_flag == 0)
					{
						exp_mutations_5 = mut;
						exp_mutations_5_flag = 1;
					}
					else
					{
						exp_mutations_5 = c(exp_mutations_5, mut);
					}
				}
			}
			if(exp_mutations_1_flag == 1)
			{
				exp_counts_1 = genomes.mutationCountsInGenomes(exp_mutations_1);
 				//s_exp_1 = rep(1,size(exp_mutations_1)) + (exp_mutations_1[0:(size(exp_mutations_1)-1)].getValue("h_m")[exp_counts_1[0:(size(exp_mutations_1)-1)]] * exp_mutations_1[0:(size(exp_mutations_1)-1)].getValue("s"));
				fit_vector = sapply(seqAlong(exp_mutations_1), "mut = exp_mutations_1[applyValue]; count = exp_counts_1[applyValue]; 1 + mut.getValue('h_m')[count] * mut.getValue('s');");
				s_exp_1 = product(fit_vector);
			}
			if(exp_mutations_5_flag == 1)
			{
				exp_counts_5 = genomes.mutationCountsInGenomes(exp_mutations_5);
 				//s_exp_5 = rep(1,size(exp_mutations_5)) + (exp_mutations_5[0:(size(exp_mutations_5)-1)].getValue("h_m")[exp_counts_5[0:(size(exp_mutations_5)-1)]] * exp_mutations_5[0:(size(exp_mutations_5)-1)].getValue("s"));
				fit_vector = sapply(seqAlong(exp_mutations_5), "mut = exp_mutations_5[applyValue]; count = exp_counts_5[applyValue]; 1 + mut.getValue('h_m')[count] * mut.getValue('s');");
				s_exp_5 = product(fit_vector);
			}
			
			all_counts = genomes.mutationCountsInGenomes(mutations);
 			//s_all = rep(1,size(mutations)) + (mutations[0:(size(mutations)-1)].getValue("h_m")[all_counts[0:(size(mutations)-1)]] * mutations[0:(size(mutations)-1)].getValue("s"));
			fit_vector = sapply(seqAlong(mutations), "mut = mutations[applyValue]; count = all_counts[applyValue]; 1 + mut.getValue('h_m')[count] * mut.getValue('s');");
			s_all = product(fit_vector);
			
			if(ind_flag == 0)
			{
				exp_fitnesses_1 = s_exp_1;
				exp_fitnesses_5 = s_exp_5;
				all_fitnesses = s_all;
				ind_flag = 1;
			}
			else
			{
				exp_fitnesses_1 = c(exp_fitnesses_1, s_exp_1);
				exp_fitnesses_5 = c(exp_fitnesses_5, s_exp_5);
				all_fitnesses = c(all_fitnesses, s_all);
			}
		}
		return c(mean(all_fitnesses),((mean(exp_fitnesses_1)-1) / (mean(all_fitnesses)-1)), ((mean(exp_fitnesses_5)-1) / (mean(all_fitnesses)-1)));
	}
	else{
		return c(0.0,0.0,0.0);
	}
	
}

function (float)calc_h_from_s(float s, float t_i, integer t_r)
{
	//calculate h from s using theta_intercept and theta_rate parameters
	h = 1 / ((1/t_i)-(t_r*s));
	return h;
}

function (float)get_tetraploid_h_vector(float s_d){
	//calculate h vector of tetraploids given h of a diploid (s_d)
	if(s_d == 0.5){
		return c(0.0,0.25,0.5,0.75,1.0);
	}
	else
	{
		s_t_25 = 1-(1+((1-s_d)/(2*s_d-1)))*(0.25/(0.25+((1-s_d)/(2*s_d-1))));
		s_t_50 = 1-(1+((1-s_d)/(2*s_d-1)))*(0.5/(0.5+((1-s_d)/(2*s_d-1))));
		s_t_75 = 1-(1+((1-s_d)/(2*s_d-1)))*(0.75/(0.75+((1-s_d)/(2*s_d-1))));
		return c(0.0,s_t_75,s_t_50,s_t_25,1.0);
	}
}

function (float)calc_het(lifso x)
{
	if(inheritance == "diploid")
	{
		chroms = c(sim.subpopulations[x-1].individuals.genome1, sim.subpopulations[0].individuals[sim.subpopulations[x-1].individuals.tag].genome2);
	}
	else
	{
		chroms = c(sim.subpopulations[x-1].individuals.genomes, sim.subpopulations[0].individuals[sim.subpopulations[x-1].individuals.tag].genomes);
	}
	
	if(size(chroms) == 0)
		return 0.0;
	if(inheritance == "allo")
	//for allos, calc heterozygosity within individual subgenomes
		return mean(c(calcHeterozygosity(sim.subpopulations[x-1].individuals.genomes),calcHeterozygosity(sim.subpopulations[0].individuals[sim.subpopulations[x-1].individuals.tag].genomes)));
	else
		return calcHeterozygosity(chroms);
}

function (float)get_mutation_freqs(lifso<Subpopulation> x)
{
	//for allopolyploids it returns frequencies of subgenomes
	div_factor = 2;
	if(inheritance == "auto")
		div_factor = 4;
	all_inds = c(x.individuals,sim.subpopulations[0].individuals[x.individuals.tag]);
	if(size(all_inds) != 0){
		counts = all_inds.genomes.mutationCountsInGenomes(NULL);
		return counts / size(x.individuals) / div_factor;
	}
	else
		return 0.0;
}

function (float)get_beneficial_freq(lifso<Subpopulation> x)
{
	div_factor = 4;
	if(inheritance == "diploid")
		div_factor = 2;
	all_inds = c(x.individuals,sim.subpopulations[0].individuals[x.individuals.tag]);
	all_muts = unique(all_inds.genomes.mutationsOfType(m1));
	if(size(all_inds) != 0){
		counts = all_inds.genomes.mutationCountsInGenomes(all_muts);
		return counts / size(x.individuals) / div_factor;
	}
	else
		return 0.0;
}

function (float)get_deleterious_freq(lifso<Subpopulation> x)
{
	div_factor = 4;
	if(inheritance == "diploid")
		div_factor = 2;
	all_inds = c(x.individuals,sim.subpopulations[0].individuals[x.individuals.tag]);
	all_muts = unique(all_inds.genomes.mutationsOfType(m2));
	if(size(all_inds) != 0){
		counts = all_inds.genomes.mutationCountsInGenomes(all_muts);
		return counts / size(x.individuals) / div_factor;
	}
	else
		return 0.0;
}

function (float)get_dip_mutation_freq(lifso<Subpopulation> x)
{
	div_factor = 4;
	if(inheritance == "diploid")
		div_factor = 2;
	all_inds = c(x.individuals,sim.subpopulations[0].individuals[x.individuals.tag]);
	all_muts = unique(all_inds.genomes.mutationsOfType(m3));
	if(size(all_inds) != 0){
		counts = all_inds.genomes.mutationCountsInGenomes(all_muts);
		return counts / size(x.individuals) / div_factor;
	}
	else
		return 0.0;
}

function (float)mut_per_genome(lifso<Subpopulation> x)
{
	div_factor = 4;
	if(inheritance == "diploid")
		div_factor = 2;
	n_muts_ben = 0;
	n_muts_del = 0;
	
	all_inds = c(x.individuals,sim.subpopulations[0].individuals[x.individuals.tag]);
	if(size(all_inds) != 0){
		for(ind in x.individuals){
			genomes = c(ind.genomes, sim.subpopulations[0].individuals[ind.tag].genomes);
			n_muts_ben = n_muts_ben + genomes.countOfMutationsOfType(m1);
			n_muts_del = n_muts_del + genomes.countOfMutationsOfType(m2);

		}
		counts_total = sum(n_muts_ben+n_muts_del) / size(x.individuals) / div_factor;
		counts_ben= sum(n_muts_ben) / size(x.individuals) / div_factor;
		counts_del= sum(n_muts_del) / size(x.individuals) / div_factor;

		return c(counts_total, counts_ben, counts_del);
	}
	else
		return 0.0;
}

function (float)get_mutation_per_ind(lifso<Subpopulation> x)
{
	n_muts = 0;
	if(size(x.individuals) != 0){
		for(ind in x.individuals){
			counts_1 = ind.genomes.mutationCountsInGenomes(NULL);
			counts_2 = sim.subpopulations[0].individuals[ind.tag].genomes.mutationCountsInGenomes(NULL);
			all_counts = counts_1 + counts_2;
			n_muts = n_muts + size(which(all_counts != 0));
		}
		return n_muts / size(x.individuals);
	}
	else
		return 0.0;
}

function (float)get_ben_mutation_per_ind(lifso<Subpopulation> x)
{
	all_genomes = c(x.individuals,sim.subpopulations[0].individuals[x.individuals.tag]);
	all_muts = unique(all_genomes.genomes.mutationsOfType(m1));
	n_muts = 0;
	if(size(all_genomes) != 0){
		for(ind in x.individuals){
			counts_1 = ind.genomes.mutationCountsInGenomes(all_muts);
			counts_2 = sim.subpopulations[0].individuals[ind.tag].genomes.mutationCountsInGenomes(all_muts);
			all_counts = counts_1 + counts_2;
			n_muts = n_muts + size(which(all_counts != 0));
		}
		return n_muts / size(x.individuals);
	}
	else
		return 0.0;
}

function (float)get_del_mutation_per_ind(lifso<Subpopulation> x)
{
	all_genomes = c(x.individuals,sim.subpopulations[0].individuals[x.individuals.tag]);
	all_muts = unique(all_genomes.genomes.mutationsOfType(m2));
	n_muts = 0;
	if(size(all_genomes) != 0){
		for(ind in x.individuals){
			counts_1 = ind.genomes.mutationCountsInGenomes(all_muts);
			counts_2 = sim.subpopulations[0].individuals[ind.tag].genomes.mutationCountsInGenomes(all_muts);
			all_counts = counts_1 + counts_2;
			n_muts = n_muts + size(which(all_counts != 0));
		}
		return n_muts / size(x.individuals);
	}
	else
		return 0.0;
}

function (float)get_mutation_per_ind_type(lifso<Subpopulation> x, lifso mType)
{
	all_genomes = c(x.individuals,sim.subpopulations[0].individuals[x.individuals.tag]);
	all_muts = unique(all_genomes.genomes.mutationsOfType(mType));
	n_muts = 0;
	if(size(all_genomes) != 0){
		for(ind in x.individuals){
			counts_1 = ind.genomes.mutationCountsInGenomes(all_muts);
			counts_2 = sim.subpopulations[0].individuals[ind.tag].genomes.mutationCountsInGenomes(all_muts);
			all_counts = counts_1 + counts_2;
			n_muts = n_muts + size(which(all_counts != 0));
		}
		return n_muts / size(x.individuals);
	}
	else
		return 0.0;
}

function (float)get_dip_index_robust(lifso<Subpopulation> x)
{
	if(size(x.individuals) == 0)
		return 0.0;
	else
		return mean(x.individuals.getValue("dip_index"));
}

function (float)get_average_value(lifso<Subpopulation> x, lifso var)
{
	if(size(x.individuals) == 0)
		return 0.0;
	if(isNULL(x.individuals.getValue(var)))
		return 0.0;
	else
		return mean(x.individuals.getValue(var));
}

function (float)get_average_value_nonMigs(lifso<Subpopulation> x, lifso var)
{
	if(size(x.individuals) == 0)
		return 0.0;
	inds = x.individuals[which(x.individuals.getValue("mig")==0)];
	if(size(inds) == 0)
		return 0.0;
	else
		return mean(inds.getValue(var));
}

function (float)get_fst_to_previous(lifso z){
	if(z == 1)
		return 0.0;
	
	x = sim.subpopulations[z];
	y = sim.subpopulations[z-1];
	current_inds = c(x.individuals,sim.subpopulations[0].individuals[x.individuals.tag]);
	prev_inds = c(y.individuals,sim.subpopulations[0].individuals[y.individuals.tag]);

	if(size(current_inds) == 0)
		return 0.0;

	if(size(prev_inds) == 0)
		return 0.0;

	return calcFST(current_inds.genomes,prev_inds.genomes);

}

function (float)calc_max_PHS(lifso<Subpopulation> x)
{
	max_phs = 0;
	
	for(ind in x.individuals){
		counts_1 = ind.genomes.mutationFrequenciesInGenomes(NULL);
		counts_2 = sim.subpopulations[0].individuals[ind.tag].genomes.mutationFrequenciesInGenomes(NULL);
		freqs = (counts_1+counts_2) / 2;
		phs = size(which(freqs<1.0 & freqs>0.0)) / size(freqs);
		if(phs > max_phs)
			max_phs = phs;
	}
	return asFloat(max_phs);	
}

function (float)calc_all_PHS_avg(lifso x)
{
	phs_flag = 0;
	
	for(ind in x.individuals){
		counts_1 = ind.genomes.mutationFrequenciesInGenomes(NULL);
		counts_2 = sim.subpopulations[0].individuals[ind.tag].genomes.mutationFrequenciesInGenomes(NULL);
		freqs = (counts_1+counts_2) / 2;
		phs = size(which(freqs<1.0 & freqs>0.0)) / size(freqs);
		if(phs_flag == 0){
			all_phs = phs;
			phs_flag = 1;
		}
		else
			all_phs = c(all_phs,phs);
	}
	return asFloat(mean(all_phs));	
}

function (float)variance(float x)
{
	vars = 0;
	if(isNULL(x)){
		return NULL;
	}
	else{
		mean_x = mean(x);
		for(i in x){
			if(!isNULL(i)){
				vars = vars + (i-mean_x)^2;
			}
		}
	}
		return asFloat(vars/size(x));
}

function (integer)check_neg(integer x)
{
	if(x < 0)
		return 0;
	else
		return x;
}
